[
  {
    "input": "Generate a lab on Django CRUD with Django Rest Framework. Learning objectives: Build a full-stack Django application with authentication using Django Rest Framework (DRF), Implement One-to-Many and Many-to-Many relationships with DRF serializers, Manage user authorization and data protection with DRF The content should be approximately 600 words with a text-to-code ratio of 0.95. Include 1 images and 0 diagrams. Design this for a deductive teaching approach with 6 demonstration points. The instructor will need 90 minutes to prepare. The content should follow a stepped increase cognitive load pattern with medium student autonomy and medium interactivity.",
    "output": "# ![](https://ga-dash.s3.amazonaws.com/production/assets/logo-9f88ae6c9c3871690e33280fcf557f33.png) Django CRUD Lab\n\n| Title               | Type   | Duration | Author               |\n|---------------------|--------|----------|----------------------|\n| Django CRUD DEF Lab | Lesson | 6:00     | Suresh Melvin Sigera |\n\n### Learning Objectives\n\n- Build a full-stack Django application with authentication using Django Rest Framework (DRF).\n- Implement One-to-Many and Many-to-Many relationships with DRF serializers.\n- Manage user authorization and data protection with DRF.\n\n#### Day 1: Django Setup, URLs, Views, and DRF Intro\n\n- Set up Django project and app.\n- Configure URLs for Django and DRF endpoints.\n- Introduction to Django models and serializers.\n- Create Dog model with fields: name, breed, description, age.\n- Implement basic CRUD views using DRF:\n    - List (index)\n    - Detail\n    - Create\n    - Update\n    - Delete\n- Set up user authentication (registration and login) via DRF for creating dogs.\n- Add dog feeding functionality with datetime tracking via API endpoints.\n\n#### Day 2: Many-to-Many Relationships with DRF\n\n- Create Toy model with fields: name, color.\n- Add Many-to-Many relationship between Dog and Toy models.\n- Create CRUD API endpoints for managing toys.\n- Implement toy assignment to dogs through DRF endpoints.\n- Display assigned toys on dog detail page through DRF serializers.\n\n#### Day 3: Authentication & Authorization with DRF\n\n- Implement user signup, login, and logout using DRF's authentication system.\n- Add user-specific API views, ensuring that each user can only access their own data.\n- Restrict dog and toy operations to authenticated users using DRF permissions.\n- Add a user profile API endpoint showing the authenticated user's dogs.\n\n## How to submit homework\n\n### Submitting work\n\n- Step 1. Create a new repository on your GitHub Enterprise account named \"dog-collector-drf.\"\n- Step 2. Push your project to the newly created repository.\n- Step 3. Create an issue in this repository\n- Step 3.1. Add a title (First name, Last Name) and your repository URL\n\nIn the comment section, you must add the following:\n\n```text\n* Comfort level [0 to 5]\n* Completeness [0 to 5]\n* What was a win?\n* What was a challenge?\n* Any other comments\n```\n"
  },
  {
    "input": "Generate a lab on Python Unit Testing. Learning objectives: Write unit tests for Python functions, Understand test-driven development principles, Use Python's unittest framework The content should be approximately 400 words with a text-to-code ratio of 0.89. Include 0 images and 0 diagrams. Design this for a inductive teaching approach with 4 demonstration points. The instructor will need 30 minutes to prepare. The content should follow a consistent cognitive load pattern with medium student autonomy and medium interactivity.",
    "output": "# ![](https://ga-dash.s3.amazonaws.com/production/assets/logo-9f88ae6c9c3871690e33280fcf557f33.png) Python Unit Testing Lab I\n\n| Title                     | Type   | Duration | Author               |\n|---------------------------|--------|----------|----------------------|\n| Python Unit Testing Lab I | Lesson | 2:30     | Suresh Melvin Sigera |\n\n## Part 1\n\n- Write a program that counts up the number of vowels contained in the string `s`. Valid vowels are: `'a', 'e', 'i', 'o',\n  and 'u'`. For example, if `s = 'azcbobobegghakl'`, your program should print: `Number of vowels: 5`.\n\n- Write a program that prints the number of times the string `bob` occurs in `s`. For example,\n  if `s = 'azcbobobegghakl'`, then your program should print `Number of times bob occurs is: 2`.\n\n- Ask the user to input a string and then reversal the given input. `Input: \"Programming in Python\"`, `Output: nohtyP ni\n  gnimmargorP`.\n\n- Write a program that accepts a sentence and calculate the number of uppercase letters and lowercase letters. Suppose\n  the\n  following input is supplied to the program. `Input: Hello World`, `Output: UPPERCASE: 2, LOWERCASE: 9`. You may count\n  space as lowercase.\n\n- Write a program that accepts a comma-separated sequence of words as input and prints the words in a comma-separated\n  sequence after sorting them alphabetically. Suppose the following input is supplied to the program: `without, hello,\n  bag, world` Then, the output should be: `bag, hello, without, world`.\n\n- Ask the user to enter a string, and check if it is a palindrome. If yes, print `True`, or else print `False`.\n\n## Part 2\n\nUsing the solutions from Part 1, write unit tests for each of the six programs to verify that they work correctly.\n\n## How to submit homework\n\n### Setup\n\n- Step 1. Fork the repository\n- Step 2. Clone your fork\n\n### Submitting work\n\n- Step 1. Complete your work in `test\\unit` directory, you should have six test classes in total\n- Step 2. Push to your fork\n- Step 3. Submit a pull request\n- Step 3.1. Add a title (First name, Last Name) and comment\n\nIn the comment section, you must add the following:\n\n```text\n* Comfort level [0 to 5]\n* Completeness [0 to 5]\n* What was a win?\n* What was a challenge?\n* Any other comments\n```\n"
  },
  {
    "input": "Generate a lab on Testing REST API Views. Learning objectives: Write tests for REST API endpoints, Understand API testing best practices, Implement test cases for CRUD operations The content should be approximately 500 words with a text-to-code ratio of 0.88. Include 0 images and 0 diagrams. Design this for a deductive teaching approach with 5 demonstration points. The instructor will need 60 minutes to prepare. The content should follow a stepped increase cognitive load pattern with medium student autonomy and medium interactivity.",
    "output": "# ![](https://ga-dash.s3.amazonaws.com/production/assets/logo-9f88ae6c9c3871690e33280fcf557f33.png) Cat API Testing Lab\n\n| Title               | Type | Duration | Author               |\n|---------------------|------|----------|----------------------|\n| Cat API Testing Lab | Lab  | 3:00     | Suresh Melvin Sigera |\n\nIn this hands-on lab, students will test a Django REST API for a Cat Collector application. The lab covers testing CRUD\noperations, relationships between models (`Cats`, `Toys`, `Feedings`), and proper authentication/authorization flows. \n\nStudents will use Django's test framework along with REST framework test utilities to verify API functionality.\n\n### Learning Objectives\n\nUpon completion of this lab, students will be able to:\n\n- **API Testing Fundamentals**\n    - Execute CRUD operations using REST API endpoints\n    - Verify API responses and status codes\n    - Understand API authentication and authorization flows\n    - Test API endpoint relationships and data persistence\n\n- **REST Resource Management**\n    - Test creation and management of primary resources (Cats)\n    - Verify relationships between resources (Cats and Toys)\n    - Validate nested resource operations (Feedings)\n    - Confirm proper data persistence and retrieval\n\n- **Prerequisites**\n    - Basic understanding of HTTP methods (GET, POST, PUT, DELETE)\n    - Familiarity with JSON data format\n    - Access to API testing tool (Postman, cURL, or similar)\n    - Valid user account credentials\n\n**Exercise 1: Start by getting your access token**\n**Exercise 2: Cat CRUD Operations**\n\n| Method | Endpoint  | Description           |\n|--------|-----------|-----------------------|\n| POST   | /cats     | Create a new cat      |\n| GET    | /cats     | Retrieve all cats     |\n| GET    | /cats/:id | Retrieve a single cat |\n| PUT    | /cats/:id | Update a cat          |\n| DELETE | /cats/:id | Delete a cat          |\n\n**Exercise 2: Cat Toy Relationships**\n\n| Method | Endpoint  | Description           |\n  |--------|-----------|-----------------------|\n| POST   | /toys     | Create a new toy      |\n| GET    | /toys     | Retrieve all toys     |\n| GET    | /toys/:id | Retrieve a single toy |\n| PUT    | /toys/:id | Update a toy          |\n| DELETE | /toys/:id | Delete a toy          |\n\n**Exercise 3: Cat Feeding Operations**\n\n| Method | Endpoint      | Description               |\n|--------|---------------|---------------------------|\n| POST   | /feedings     | Create a new feeding      |\n| GET    | /feedings     | Retrieve all feedings     |\n| GET    | /feedings/:id | Retrieve a single feeding |\n| PUT    | /feedings/:id | Update a feeding          |\n| DELETE | /feedings/:id | Delete a feeding          |\n\n**Exercise 4: Permission Testing**\n\n| Method | Endpoint                   | Description             |\n|--------|----------------------------|-------------------------|\n| GET    | /cats/                     | Try Without Token       |\n| GET    | /cats/[other_user_cat_id]/ | Access Other User's Cat |\n| PUT    | /cats/[other_user_cat_id]/ | Update Other User's Cat |\n\n**Testing Sequence**\n\n- Basic CRUD Flow\n    - Create a new cat\n    - Verify cat details\n    - Update cat information\n    - Delete cat\n- Toy Relationships\n    - Create multiple toys\n    - Add toys to cat\n    - Verify toy list\n    - Remove toys\n- Feeding Management\n    - Add multiple feedings\n    - Verify feeding records\n    - Update feeding details\n    - Remove feedings\n- Error Cases\n    - Try invalid data formats\n    - Test permission boundaries\n    - Attempt unauthorized operations\n\n**Extension Activities**\n\n- Create a cat with multiple toys and feedings\n- Try batch operations (multiple updates)\n- Test different feeding patterns\n- Verify cascade deletions\n\n### How to submit homework\n\n#### Setup\n\n- Step 1. Fork the repository\n- Step 2. Clone your fork\n\n#### Submitting work\n\n- Step 3. Push to your fork\n- Step 4. Submit a pull request\n- Step 4.1. Under the title, add your first and last name with the comment\n\nIn the comment section, you must add the following:\n\n```text\n* Comfortability [0 to 5]\n* Completeness [0 to 5]\n* What was a win?\n* What was a challenge?\n* Any other comments\n```"
  },
  {
    "input": "Generate a lab on Modern JavaScript Syntax. Learning objectives: Use ES6+ features in JavaScript, Implement modern JavaScript patterns, Understand JavaScript best practices The content should be approximately 450 words with a text-to-code ratio of 0.88. Include 0 images and 0 diagrams. Design this for a comparative teaching approach with 6 demonstration points. The instructor will need 40 minutes to prepare. The content should follow a feature by feature cognitive load pattern with medium student autonomy and high interactivity.",
    "output": "<h1>\n  <span class=\"prefix\"></span>\n  <span class=\"headline\">Modern JavaScript Syntax Lab</span>\n</h1>\n\n## About\n\nOver the last decade, JavaScript has seen significant changes in its syntax to make it more user-friendly, responding to developers' needs. These updates have become standard in popular frameworks like React, Vue, and Angular. It\u2019s key to understand that these changes primarily enhance coding efficiency rather than add new functionality to the language.\n\nThis lab is your opportunity to dive into modern JavaScript syntax. Understanding this contemporary style is beneficial, but a solid grasp of traditional JavaScript is essential. It lays a strong foundation not only for JavaScript but also for learning other programming languages.\n\n## Content\n\n- [Setup](./setup/README.md)\n- [Exercise](./exercise/README.md)\n\n## Internal\n\n### Prerequisites\n\nNone\n\n### Time to complete\n\nEstimated time to complete core lab exercise: **60 min**\n\n### Solution code\n\n\ud83c\udfc1 [Solution Code](https://git.generalassemb.ly/modular-curriculum-all-courses/modern-javascript-syntax-lab-solution)\n\n### Course landing pages\n\n- [RDS - React Development Short Course](https://pages.git.generalassemb.ly/modular-curriculum-all-courses/modern-javascript-syntax-lab/canvas-landing-pages/rds.html)\n- [SEB - Software Engineering Bootcamp](https://pages.git.generalassemb.ly/modular-curriculum-all-courses/modern-javascript-syntax-lab/canvas-landing-pages/seb.html)\n- [Fallback](https://pages.git.generalassemb.ly/modular-curriculum-all-courses/modern-javascript-syntax-lab/canvas-landing-pages/fallback.html)\n\n### Resources\n\n\u270f\ufe0f [Instructor Guide](./internal-resources/instructor-guide.md)\n\n\ud83c\udfa5 [Video Hub](./internal-resources/video-hub.md)\n\n\ud83c\udfd7\ufe0f [Release Notes](./internal-resources/release-notes.md)\n\n---\n\n**Find a \ud83d\udc7e bug \ud83d\udc7e or have suggestions? [Let us know](https://pages.git.generalassemb.ly/modular-curriculum-all-courses/universal-resources-internal/module-feedback.html)!**\n"
  },
  {
    "input": "Generate a lab on Lifting State in React. Learning objectives: Understand React state management, Implement state lifting between components, Create reusable React components The content should be approximately 350 words with a text-to-code ratio of 1.0. Include 2 images and 0 diagrams. Design this for a inductive teaching approach with 3 demonstration points. The instructor will need 45 minutes to prepare. The content should follow a gradual build cognitive load pattern with medium student autonomy and high interactivity.",
    "output": "<h1>\n  <span class=\"prefix\"></span>\n  <span class=\"headline\">Lifting State in React Lab</span>\n</h1>\n\n## About\n\nWelcome to Reactville, a constantly evolving virtual metropolis. Let's build this digital town together, one component at a time.\n\n![Reactville Skyline](./assets/reactville.png)\n\nToday, you're stepping into the Reactville Burger Shop, a favorite local eatery known for its mouth-watering burgers. In this interactive app, users build their dream burger, choosing from various breads, meats, and toppings. But there's a catch: it's also a lesson in 'lifting state' in React. Get ready to stack ingredients and elevate your React skills!\n\n![Solution UI](./assets/burger.png)\n\nIn this lab, students will create a burger builder app with two main components: an ingredients list and a burger stack. Users will be able to add items from the ingredients list to the burger stack to create the perfect burger.\n\n## Content\n\n- [Setup](./setup/README.md)\n- [Exercise](./exercise/README.md)\n- [Create a Reusable `Ingredient` Component](./create-a-reusable-ingredient-component/README.md)\n\n## Internal\n\n### Prerequisites\n\n- Lifting State in React\n\n### Time to complete\n\nEstimated time to complete core lab exercise: **180 mins**\n\n### Solution code\n\n\ud83c\udfc1 [Solution code](https://git.generalassemb.ly/modular-curriculum-all-courses/lifting-state-in-react-lab-solution)\n\n### Course landing pages\n\n- [RDS - React Development Short Course](https://pages.git.generalassemb.ly/modular-curriculum-all-courses/lifting-state-in-react-lab/canvas-landing-pages/rds.html)\n- [SEB - Software Engineering Bootcamp](https://pages.git.generalassemb.ly/modular-curriculum-all-courses/lifting-state-in-react-lab/canvas-landing-pages/seb.html)\n- [Fallback](https://pages.git.generalassemb.ly/modular-curriculum-all-courses/lifting-state-in-react-lab/canvas-landing-pages/fallback.html)\n\n### Resources\n\n\u270f\ufe0f [Instructor Guide](./internal-resources/instructor-guide.md)\n\n\ud83c\udfa5 [Video Hub](./internal-resources/video-hub.md)\n\n\ud83c\udfd7\ufe0f [Release Notes](./internal-resources/release-notes.md)\n\n---\n\n**Find a \ud83d\udc7e bug \ud83d\udc7e or have suggestions? [Let us know](https://pages.git.generalassemb.ly/modular-curriculum-all-courses/universal-resources-internal/module-feedback.html)!**\n"
  },
  {
    "input": "Generate a lesson on AWS CloudFormation Provisioning Resources. Learning objectives: Understand the concept of infrastructure-as-code and the role of AWS CloudFormation, Gain familiarity with the AWS CloudFormation Designer, Learn how to create a CloudFormation stack and configure stack details, Understand the importance of key pairs for SSH access to EC2 instances The content should be approximately 750 words with a text-to-code ratio of 0.93. Include 9 images and 0 diagrams. Design this for a deductive teaching approach with 5 demonstration points. The instructor will need 60 minutes to prepare. The content should follow a concept heavy start cognitive load pattern with low student autonomy and medium interactivity.",
    "output": "# ![](https://ga-dash.s3.amazonaws.com/production/assets/logo-9f88ae6c9c3871690e33280fcf557f33.png) AWS CloudFormation Provisioning Resources\n\n| Title                                     | Type | Duration | \n|-------------------------------------------|------|----------|\n| AWS CloudFormation Provisioning Resources | Lab  | 1:00     |\n\n- [ AWS CloudFormation Provisioning Resources](#-aws-cloudformation-provisioning-resources)\n  - [Objectives](#objectives)\n  - [Instructions](#instructions)\n  - [Troubleshooting](#troubleshooting)\n\n## Objectives\n\n*After this lesson, students will be able to:*\n\n- Understand the concept of infrastructure-as-code and the role of AWS CloudFormation in provisioning and managing AWS\n  resources.\n- Gain familiarity with the AWS CloudFormation Designer and its visual representation of resources.\n- Learn how to create a CloudFormation stack and configure the stack details.\n- Understand the importance of key pairs for SSH access to EC2 instances and learn how to select an existing key pair or\n  create a new one.\n- Gain hands-on experience in launching an EC2 instance with a public IP using CloudFormation.\n- Understand the process of reviewing and validating stack information before initiating the stack creation.\n- Learn how to submit the CloudFormation stack creation and monitor the deployment process.\n- Gain proficiency in SSHing into the deployed EC2 instance using the assigned public IP address.\n\nIn this lab, you will gain hands-on experience using AWS CloudFormation to deploy a single virtual machine (EC2\ninstance) with a public IP address. Following the steps below, you will be able to provision infrastructure-as-code and\nlaunch an EC2 instance using CloudFormation.\n\n## Instructions\n\n- Visit the AWS CloudFormation guide to\n  see [sample templates](https://aws.amazon.com/cloudformation/templates/aws-cloudformation-templates-sa-east-1/)\n  for AWS CloudFormation.\n- Look for the EIP_With_Association.template (Associate an EC2 Instance with a pre-existing EIP.)  \n- You can begin the stack creation by returning to the previous browser tab and clicking on **Launch Stack** button.\n- In Step 1 of the stack creation wizard, leave all the fields at their default values and click **Next**.\n  ![img_03.png](images/img_03.png)\n- Provide a suitable name for the stack, such as **Lab02**, or any other preferred name. Select the appropriate Key\n  Pair from the list. Note: If no key pairs are available, you will need to either create a\n  new key pair manually or modify the template to include the creation of a key pair.\n  ![img_04.png](images/img_04.png)\n- Click **Next** to proceed to Step 3.\n- In Step 3, leave all the options at their default values and click **Next**.\n- Review the stack information on the **Review** page to ensure all the details are correct.\n- Click **Submit** to initiate the CloudFormation stack creation.\n- Monitor the stack creation process until it is completed.\n  ![img_05.png](images/img_05.png)\n- Once the stack creation is successful, retrieve the assigned public IP address of the EC2 instance.\n  ![img_06.png](images/img_06.png)\n  ![img_07.png](images/img_07.png)\n- Use an SSH client to connect to the EC2 instance using the public IP address, following the appropriate SSH command\n  syntax for your operating system.\n  ![img_08.png](images/img_08.png)\n\n![img_09.png](images/img_09.png)\n\nCongratulations! You have successfully deployed an EC2 instance with a public IP address using AWS CloudFormation.\n\n## Troubleshooting\n\nHow to fix the unprotected private key file error?\n\nThe **unprotected private key file** error typically occurs when the permissions on your private key file are too\npermissive, making it accessible to other users or processes on your system. To fix this error, you need to restrict the\npermissions on your private key file. Here's how you can do it:\n\n1. Locate your private key file. It is usually a file with a `.pem` extension.\n2. Open a terminal or command prompt.\n3. Change the permissions of the private key file to make it readable only by the owner. Run the following command:\n\n  ```text\n  chmod 400 /path/to/private_key.pem\n  ```\n\n4. Replace `/path/to/private_key.pem` with the actual path to your private key file.\n5. Verify the permissions by running the following command:\n\n```text\nls -l /path/to/private_key.pem\n```\n\nMake sure the permissions are set to `-r-------- or -rw-------`, indicating that only the owner has read access.\n\n6. Try using the private key file again to connect to your server or perform the desired operation. The **unprotected\n   private key file** error should no longer occur.\n\nBy restricting the permissions on your private key file, you ensure that it is only accessible to you, enhancing the\nsecurity of your SSH connections.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "input": "Generate a lesson on Full Stack React Application Development. Learning objectives: Build a full-stack application with React frontend and Express backend, Implement CRUD operations across the stack, Connect React components to API endpoints The content should be approximately 600 words with a text-to-code ratio of 0.83. Include 2 images and 1 diagrams. Design this for a code-along teaching approach with 8 demonstration points. The instructor will need 75 minutes to prepare. The content should follow a layered complexity cognitive load pattern with low student autonomy and high interactivity.",
    "output": "# Connect React frontend to Express API backend\n\n## Start up your Node Express Backend\n\n1. Open your terminal.\n2. To access the `mef` directory, please navigate to it from your home directory using the command `cd ~/mef`.\n3. Fork the repository named [full-stack-react](https://git.generalassemb.ly/ModernEngineering/full-stack-react) on the\n   GitHub website.\n4. Click the \"Fork\" button in the upper right corner of the repository page. This will create a copy of the repository\n   under your own GitHub account.\n5. After forking, you'll have your own copy of the repository under your GitHub account.\n    - Copy the URL of your forked repository, which will look\n      like: `https://github.com/YourUsername/full-stack-react.git`.\n6. Now clone the repository using the SSH URL.\n7. To change your current working directory to `express-todo-api` within the cloned `full-stack-react` repository, you\n   can use the following commands: `cd full-stack-react/express-todo-api/`.\n8. To reset the existing database using the `psql` command, you can use the following\n   command: `psql -U postgres -d todo_app_db < db/todo.sql`.\n9. To add dependencies to our project, use the `npm install` command followed by the package names you want to install.\n   In our case, `npm i cors express pg nodemon`.\n10. To open the express-todo-api project in VSCode, use the command `code .`. After opening the project, you can initiate the server by opening the VS Code terminal and executing the command `npm run start`. The server is set up to listen on port `3001`.\n\nNOTE: If you get a message that a port is in use, you can kill it with this\ncommand: `sudo kill -9 $(sudo lsof -t -i:3000)`.\n\n- Replace `3000` with the port number you want to stop.\n- [Reference](https://tecadmin.net/kill-process-on-specific-port/)\n\n## Postman Review\n\nLet's open the Postman Collection that is provided (or that you built in class) to review the 5 API Todo endpoints.\n\n1. Open Postman: Run `/opt/Postman/app/Postman` in the terminal\n2. The collection should already be available in Postman. If it's not, you can select \"Import\" then locate the\n   `todo_app.postman_collection.json` file in the `express-to-do-api` folder.\n\nOnce we've reviewed and confirmed that the backend is functioning correctly, we can shift our attention to the React\nfrontend.\n\n## Setting up React Frontend Application\n\nTo begin running the React frontend application, please open a new terminal window and navigate to the full-stack-react\nfolder, which you cloned earlier.\n\n1. `cd ~/mef/full-stack-react/react-to-do-frontend-starter/`.\n2. Now, open the terminal window within VSCode and execute the following commands:\n    - Run `npm i` to install the necessary Node.js dependencies.\n    - After the dependencies are installed, start the React frontend application with: `npm run start`.\n3. This will launch the development server for your React frontend application and should open it in your default web\n   browser.\n\n## Get all Todos\n\n#### GET TODOS - `http://127.0.0.1:3001/api/todos`\n\n1. We'll need to make a `fetch` request to hit our backend endpoint to get all the todos.\n\n   `MyList.js` - (this should be in the starter code)\n\n   ```js\n   import ListItem from \"./ListItem\";\n   import { useState, useEffect } from \"react\";\n\n   function MyList() {\n     const [toDoItemArray, setToDoItemArray] = useState([]);\n     const [newItem, setNewItem] = useState(\"\");\n\n     const todoItems = toDoItemArray.map((item) => (\n       <ListItem {...item} key={item.id} />\n     ));\n\n     // We declare a named function called getTodos()\n     // because an fetch and .json are asynchronous.\n     // You can put all of this inside useEffect if you want\n     async function getTodos() {\n       const response = await fetch(\"http://127.0.0.1:3001/api/todos\");\n       const todos = await response.json();\n       console.log(\"Todos from database\", todos);\n\n       setToDoItemArray(todos);\n     }\n\n     // Inside the [], tell useEffect to update\n     // only when a particular value changes\n     // React will do an infinite update if you do not\n     // supply an empty dependencies array\n     useEffect(() => {\n       getTodos();\n     }, []);\n\n     return (\n       <div>\n         <h1>Things I should stop procrastinating:</h1>\n         <ul>{todoItems}</ul>\n         {newItem}\n         <form>\n           <input\n             type=\"text\"\n             placeholder=\"Type an item here\"\n             onChange={(e) => setNewItem(e.target.value)}\n             value={newItem}\n           />\n           <button\n             onClick={(e) => {\n               e.preventDefault();\n               setToDoItemArray([...toDoItemArray, newItem]);\n               setNewItem(\"\");\n             }}\n           >\n             Add it!\n           </button>\n         </form>\n         <button\n           onClick={() => {\n             console.log(\"Clearing list!\");\n             setToDoItemArray([]);\n           }}\n         >\n           Finished the list!\n         </button>\n       </div>\n     );\n   }\n\n   export default MyList;\n   ```\n\n1. `ListItem.js` (this should be in the starter code)\n\n   ```js\n   const ListItem = ({ title, done, id }) => {\n     return (\n       <>\n         <li>\n           {title}\n           <input type=\"checkbox\" defaultChecked={done} />\n         </li>\n       </>\n     );\n   };\n   export default ListItem;\n   ```\n\n- Import `useEffect`\n- Make an API call to the Express Backend\n- Update our `ListItem` component\n\n<br>\n\n## Create a Todo\n\n#### POST TODOS - `http://127.0.0.1:3001/api/todos`\n\n1. First, in `MyList.js`, we'll create an `async` function named `createTodo`. We will move some of the code from the\n   button element to this function.\n\n   `MyList.js`\n\n   ```jsx\n   async function createTodo(e) {\n     e.preventDefault();\n\n     let newItemForDatabase = {\n       title: newItem,\n       done: false,\n     };\n\n     const options = {\n       method: \"POST\",\n       headers: {\n         Accept: \"application/json\",\n         \"Content-Type\": \"application/json\",\n       },\n       body: JSON.stringify(newItemForDatabase),\n     };\n     try {\n       const response = await fetch(`http://127.0.0.1:3001/api/todos`, options);\n       const data = await response.json();\n       console.log(\"newTodo With ID\", data);\n       setToDoItemArray([...toDoItemArray, data]);\n       setNewItem(\"\");\n     } catch (error) {\n       console.log(error);\n     }\n   }\n   ```\n\n1. Next, in `MyList`, we'll update the button in our `return` method to call the function.\n\n   `MyList.js`\n\n   ```jsx\n       // Replace the logic in this button...\n\n           <button\n             onClick={(e) => {\n               e.preventDefault();\n               setToDoItemArray([...toDoItemArray, newItem]);\n               setNewItem(\"\");\n             }}\n           >\n             Add it!\n           </button>\n\n       // With this version of the button\n\n           <button onClick={createTodo}>\n               Add it!\n           </button>\n   ```\n\n1. In `ListItem`, we'll pass in the `done` and `id` as props.\n\n   ```jsx\n   const ListItem = ({ title, done, id }) => {\n     return (\n       <>\n         <li>\n           {title}\n           <input type=\"checkbox\" defaultChecked={done} />\n         </li>\n       </>\n     );\n   };\n   export default ListItem;\n   ```\n\n1. For reference, our Express backend `index.js` POST route should look like this:\n\n   ```js\n   app.post(\"/api/todos\", (request, response) => {\n     const { title, done } = request.body;\n     console.log(\"request.body\", request.body);\n\n     pool.query(\n       \"INSERT INTO todos (title, done) VALUES ($1, $2) RETURNING *\",\n       [title, done],\n       (error, results) => {\n         if (error) throw error;\n         console.log(results);\n         response.status(201).json(results.rows[0]);\n       }\n     );\n   });\n   ```\n\n<br>\n\n## DELETE Todo\n\n#### DELETE a Todo - DELETE `http://127.0.0.1:3001/api/todos/:id`\n\n1. In `MyList.js`, update the `todoItems` array to pass a `handleDeleteTodo` prop to the `ListItem` component containing\n   a `deleteTodo` event handler.\n\n   ```js\n   const todoItems = toDoItemArray.map((item, index) => (\n     <ListItem {...item} key={index} handleDeleteTodo={deleteTodo} />\n   ));\n   ```\n\n1. Next, we'll create the `deleteTodo` event handler.\n\n   ```js\n   async function deleteTodo(e, id) {\n     e.preventDefault();\n\n     const options = {\n       method: \"DELETE\",\n       headers: {\n         Accept: \"application/json\",\n         \"Content-Type\": \"application/json\",\n       },\n     };\n     try {\n       const response = await fetch(\n         `http://127.0.0.1:3001/api/todos/${id}`,\n         options\n       );\n       let newToDoItemArray = [...toDoItemArray];\n       let itemToDelete = newToDoItemArray.findIndex((item) => item.id === id);\n       newToDoItemArray.splice(itemToDelete, 1);\n       setToDoItemArray(newToDoItemArray);\n     } catch (error) {\n       console.log(error);\n     }\n   }\n   ```\n\n1. `ListItem.js`\n\n   ```js\n   const ListItem = ({ title, done, id, handleDeleteTodo }) => {\n     return (\n       <>\n         <li>\n           {title}\n           <input type=\"checkbox\" defaultChecked={done} />\n           <button onClick={(e) => handleDeleteTodo(e, id)}>X</button>\n         </li>\n       </>\n     );\n   };\n\n   export default ListItem;\n   ```\n\n<br>\n\n## Update Todo as DONE\n\n[Replacing Items in An Array](https://react.dev/learn/updating-arrays-in-state#replacing-items-in-an-array)\n\n#### Update a Todo - PUT `http://127.0.0.1:3001/api/todos/:id`\n\n1. `MyList.js` - add a `handleUpdateTodo` prop to the `ListItem` component.\n\n   ```js\n   const todoItems = toDoItemArray.map((item) => (\n     <ListItem\n       {...item}\n       key={item.id}\n       handleDeleteTodo={deleteTodo}\n       handleUpdateTodo={updateTodo}\n     />\n   ));\n   ```\n\n1. `MyList.js` - build an `updateTodo` event handler.\n\n   ```js\n   async function updateTodo(e, id) {\n     e.preventDefault();\n\n     let indexOfItem = toDoItemArray.findIndex((item) => item.id === id);\n     let itemToUpdate = { ...toDoItemArray[indexOfItem] };\n     itemToUpdate.done = !itemToUpdate.done;\n\n     const options = {\n       method: \"PUT\",\n       headers: {\n         Accept: \"application/json\",\n         \"Content-Type\": \"application/json\",\n       },\n       body: JSON.stringify(itemToUpdate),\n     };\n     try {\n       const response = await fetch(\n         `http://127.0.0.1:3001/api/todos/${id}`,\n         options\n       );\n       const newToDoItemArray = [...toDoItemArray];\n       newToDoItemArray[indexOfItem] = itemToUpdate;\n       setToDoItemArray(newToDoItemArray);\n     } catch (error) {\n       console.log(error);\n     }\n   }\n   ```\n\n1. `ListItem.js`\n\n   ```js\n   const ListItem = ({\n     title,\n     done,\n     id,\n     handleDeleteTodo,\n     handleUpdateTodo,\n   }) => {\n     return (\n       <>\n         <li>\n           {title}\n           <input\n             type=\"checkbox\"\n             //   defaultChecked={done}\n             checked={done ? \"checked\" : \"\"}\n             onChange={(e) => handleUpdateTodo(e, id)}\n           />\n           <button onClick={(e) => handleDeleteTodo(e, id)}>X</button>\n         </li>\n       </>\n     );\n   };\n\n   export default ListItem;\n   ```\n\n1. For reference, this is what our Express backend PUT route should be in `index.js`.\n\n   ```js\n   app.put(\"/api/todos/:id\", (request, response) => {\n     const id = parseInt(request.params.id);\n     const { title, done } = request.body;\n\n     pool.query(\n       \"UPDATE todos SET title = $1, done = $2 WHERE id = $3\",\n       [title, done, id],\n       (error, results) => {\n         if (error) throw error;\n         response.status(200).json({ message: `Todo modified with ID: ${id}` });\n       }\n     );\n   });\n   ```\n\n<br>\n\n## Bonuses - YOU DO\n\n- Filter Todos into 2 sections: complete and todo\n- Implement the Finished the List! button to clear out all Todos\n- Add the ability to update the title of a todo (you could add logic to make the `title` input field clickable in the\n  UI)\n- Use React Router to show the details for a single todo\n"
  },
  {
    "input": "Generate a lesson on Deploying Applications to Google Cloud Platform. Learning objectives: Build Express and React applications, Add Jest testing to applications, Deploy applications to Google Cloud Platform, Implement CI/CD with GitHub Actions The content should be approximately 700 words with a text-to-code ratio of 0.88. Include 5 images and 1 diagrams. Design this for a platform-guided teaching approach with 7 demonstration points. The instructor will need 90 minutes to prepare. The content should follow a platform focused cognitive load pattern with low student autonomy and medium interactivity.",
    "output": "# IKEA Express API / React / GitHub Actions / Google Cloud Deploy\n\n\n### In this repo\n- [Google Cloud Overview](./gcp-walkthrough.md)\n- [Build Node/Express App](./build-express-app.md)\n- [Testing With Postman](./testing-with-postman.md)\n- [Build React App](./build-react-app.md)\n- [Deploy to GCP](./deploy-to-gcp.md)\n- [Deploy to GCP with Github Actions](./deploy-to-gcp-github-actions.md)\n\n## Other repos\n- [IKEA Users App Complete](https://git.generalassemb.ly/marcwright-rem/ikea-users-app)\n- [GCP Deployed App](https://ikea-users-app-alem6gcnna-uc.a.run.app/)\n- [Public GitHub IKEA Users App](https://github.com/marcwright/ikea-users-app)\n\n<!-- # INSTRUCTIONS TO CREATE NODE\n\n## CREATE REACT VITE APP\n\n1. `mkdir pirate-app-08012024`\n1. `npm create vite@latest`\n2. Project Name: `react-app`\n3. React - Javascript\n4. Run these\n\n\t```\n\tcd pirate-app-08012024\n\tnpm install\n\tnpm run dev\n\t```\n\n5. `code .`\n6. make a change to `src/App.tsx` and app will rebuild\n7. `cd react-app` and `npm run build` will create a dist directory to deploy\n\n<br>\n\n## CREATE EXPRESS APP server side\n\n- send static html/js/css to browser\n- Create api for react app to call for data\n\n1. Go up one directory\n2. `npm init -y`\n3. `npm install express nodemon cors`\n3. `touch index.js`\n4. Add code to `index.js`\n\n ```js\n const express = require('express');\n const cors = require('cors');\n const app = express();\n app.use(cors());\n app.use(express.json());\n app.use(express.static(\"react-app/dist\"));\n \n \n app.get(\"/api/pirates/:id\", (req, res) => {\n     const id = req.params.id;\n     const pirate = getPirate(id);\n     if (!pirate) {\n       res.status(404).send(`Pirate ${id} not found`);\n     } else {\n       res.send({ data: pirate });\n     }\n   });\n function getPirate(id) {\n     const pirates = [\n       { id: 1, name: \"Blackbeard\", active: true, country: \"England\" },\n       { id: 2, name: \"Anne Bonny\", active: true, country: \"Ireland\" },\n       { id: 3, name: \"Calico Jack\", active: false, country: \"England\" },\n       { id: 4, name: \"Bartholomew Roberts\", active: true, country: \"Wales\" },\n       { id: 5, name: \"Mary Read\", active: false, country: \"England\" },\n     ];\n     return pirates.find((pirate) => pirate.id == id);\n   }\n \n const port = process.env.PORT || 8080;\n app.listen(port, async () => {\n   console.log(`Server started at ${port}`);\n }); \n ```\n\n5. Add a `start` command to `package.json`\n\n ```js\n   \"scripts\": {\n     \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n     \"start\": \"nodemon index.js\" \n   }, \n ```\n\n1. The server should start on port 8080 and we should see the `dist` folder.\n1. Try `http://localhost:8080/api/pirates/3` and you should get JSON back.\n\nNOTE - if you make a change to the files, you'll see it on `localhost:5173`, but not on `localhost:8080` since it's serving the static `dist` folder.\n\n<br>\n\n## DEPLOY TO GCP\n\n1. Go to the [Google Cloud Console](https://console.cloud.google.com/)\n2. Create a New Project\n3. Using Cloud Run which is serverless, only billed when someone sends a request.\n4. In GCP CLI - `gcloud auth login`\n5. `gcloud config set project PROJECT_ID`\n6. Deploy to Cloud Run and define what service should be called: `gcloud run deploy pirate-service-0801`. Note - make sure you're in the parent directory.\n7. A few APIs are not yet enabled. Click yes.\n\n ```js\n The following APIs are not enabled on project [pirate-app-project-08012024]:\n        artifactregistry.googleapis.com // makes it easy to rollback to previous revisions\n        cloudbuild.googleapis.com\n        run.googleapis.com\n ```\n\n1. Choose the region closest to you.\n2. Choose yes for next 2 questions. _Cloud Build question should only com up the first time._\n3. Deployment can take 3 minutes\n4. When it's done the URL should give you the same response as locally: `https://pirate-service-0801-js6e7clajq-uc.a.run.app/api/pirates/3`\n\n<br>\n\n## Add SQL Lite\n\n1. In the root directory: `npm install sequelize cors sqlite3`\n2. Add this to `index.js`\n\n ```js\n const { Sequelize, Model, DataTypes } = require('sequelize');\n const cors = require(\"cors\");\n\n  ...\n  \n app.use(cors())\n \n  ...\n  \n // Create Sequelize instance\n const sequelize = new Sequelize({\n   dialect: 'sqlite',\n   storage: './database.sqlite'\n });\n \n  ...\n  \n // Define User model\n class User extends Model {}\n User.init({\n   name: DataTypes.STRING,\n   email: DataTypes.STRING,\n   password: DataTypes.STRING\n }, { sequelize, modelName: 'user' });\n \n // Sync models with database\n sequelize.sync();\n\n app.get('/api/seeds', async (req, res) => {\n\n\n   const users = [\n     { name: \"John Doe\", email: \"john@example.com\", password: \"password1\" },\n     { name: \"Jane Smith\", email: \"jane@example.com\", password: \"password2\" },\n     { name: \"Mike Johnson\", email: \"mike@example.com\", password: \"password3\" },\n     { name: \"Sarah Williams\", email: \"sarah@example.com\", password: \"password4\" },\n     { name: \"David Brown\", email: \"david@example.com\", password: \"password5\" }\n   ];\n   users.forEach(u => User.create(u));\n   // const users = await User.findAll();\n   res.json(users);\n }); \n\n app.post('/api/users', async (req, res) => {\n   const user = await User.create(req.body);\n   res.json(user);\n });\n \n \n // CRUD routes for User model\n app.get('/api/users', async (req, res) => {\n   const users = await User.findAll();\n   res.json(users);\n });\n \n app.get('/api/users/:id', async (req, res) => {\n   const user = await User.findByPk(req.params.id);\n   res.json(user);\n });\n ```\n\n1. `cd` into `react-app` and `npm run dev`.\n2. Then, `cd` into the root and run `npm run start`\n2. Run `http://localhost:8080/api/seeds` then `http://localhost:8080/api/users`\n\n<br>\n\n## Push to GitHub\n\n1. Create a new repo and push\n2. SHOW GITHUB ACTIONS - Search for \"google\" and \"Deploy to Cloud Run from Source\"\n3. Click configure\n3. Get these from GCP Project and Cloud Run:\n\n ```js\n env:\n   PROJECT_ID: react-pirate-app-431121 # TODO: update Google Cloud project id\n   SERVICE: pirate-app # TODO: update Cloud Run service name\n   REGION: us-central1 # TODO: update Cloud Run service region\n   ENVIRONMENT: production\n    ```\n  \n4. Add these under `steps` and `name: Checkout`:\n\n ```js\n - name: Install Dependencies\n  working-directory: ./react-app\n  run: npm install\n \n - name: Build React App\n  working-directory: ./react-app\n  run: npm run build\n ```\n\n1. In the file uncomment the Alternative option for authentication:\n\n ```yaml\n # NOTE: Alternative option - authentication via credentials json\n - name: Google Auth\n  id: auth\n  uses: 'google-github-actions/auth@v0'\n  with:\n  credentials_json: '${{ secrets.GCP_CREDENTIALS }}'\n ```\n\n#### Finished yml\n\n```yaml\n# This workflow will deploy source code on Cloud Run when a commit is pushed to\n# the \"main\" branch.\n#\n# To configure this workflow:\n#\n# 1. Enable the following Google Cloud APIs:\n#\n#    - Artifact Registry (artifactregistry.googleapis.com)\n#    - Cloud Build (cloudbuild.googleapis.com)\n#    - Cloud Run (run.googleapis.com)\n#    - IAM Credentials API (iamcredentials.googleapis.com)\n#\n#    You can learn more about enabling APIs at\n#    https://support.google.com/googleapi/answer/6158841.\n#\n# 2. Create and configure a Workload Identity Provider for GitHub:\n#    https://github.com/google-github-actions/auth#preferred-direct-workload-identity-federation.\n#\n#    Depending on how you authenticate, you will need to grant an IAM principal\n#    permissions on Google Cloud:\n#\n#    - Artifact Registry Administrator (roles/artifactregistry.admin)\n#    - Cloud Run Source Developer (roles/run.sourceDeveloper)\n#\n#    You can learn more about setting IAM permissions at\n#    https://cloud.google.com/iam/docs/manage-access-other-resources.\n#\n# 3. Change the values in the \"env\" block to match your values.\n\nname: 'Deploy to Cloud Run from Source'\n\non:\n  push:\n    branches: ['main']\n\nenv:\n  PROJECT_ID: 'ikea-08202024' # TODO: update to your Google Cloud project ID\n  REGION: 'europe-west1' # TODO: update to your region\n  SERVICE: 'ikea-08202024' # TODO: update to your service name\n\njobs:\n  deploy:\n    runs-on: 'ubuntu-latest'\n\n    permissions:\n      contents: 'read'\n      id-token: 'write'\n\n    steps:\n      - name: 'Checkout'\n        uses: 'actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332' # actions/checkout@v4\n      \n      - name: 'Install Dependencies'\n        working-directory: ./react-app\n        run: npm install\n\n      - name: 'Build React App'\n        working-directory: ./react-app\n        run: npm run build\n\n      - name: 'Google Auth'\n        id: auth\n        uses: 'google-github-actions/auth@v0'\n        with:\n          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'\n\n      - name: 'Deploy to Cloud Run'\n        uses: 'google-github-actions/deploy-cloudrun@33553064113a37d688aa6937bacbdc481580be17' # google-github-actions/deploy-cloudrun@v2\n        with:\n          service: '${{ env.SERVICE }}'\n          region: '${{ env.REGION }}'\n          # NOTE: If using a different source folder, update the image name below:\n          source: './'\n\n      # If required, use the Cloud Run URL output in later steps\n      - name: 'Show output'\n        run: |-\n          echo ${{ steps.deploy.outputs.url }}\n```\n\n1. Comment the seciton above it where it mentions Workload Identity Provider.\n2. Get GCP_CREDENTIALS from `Service Account -> Permissions -> Keys` -> Add the entire downloaded JSON file to GH\n5. In your GitHub repo, Go add `Settings -> Secrets and variables -> Actions (GCP_PROJECT_ID, GCP_CREDENTIALS)`\n6. Change things to v2\n7. Commit changes then git pull\n8. Make changes - add, commit and push and watch GH Actions. -->\n"
  },
  {
    "input": "Generate a lesson on Introduction to Object-Oriented Programming. Learning objectives: Understand OOP principles, Implement classes and objects, Apply encapsulation, inheritance, and polymorphism The content should be approximately 800 words with a text-to-code ratio of 0.91. Include 0 images and 3 diagrams. Design this for a conceptual teaching approach with 5 demonstration points. The instructor will need 60 minutes to prepare. The content should follow a concept heavy cognitive load pattern with medium student autonomy and medium interactivity.",
    "output": "| Title | Type | Duration | Creator |\n| --- | -- | -- | --- |\n| Intro to Object-Oriented Programming | Lesson | 0:30 | Victor Grazi, NYC |\n\n# ![](https://ga-dash.s3.amazonaws.com/production/assets/logo-9f88ae6c9c3871690e33280fcf557f33.png) Intro to Object-Oriented Programming\n\n### Learning Objectives\n\nAt the end of this lesson, students will be able to:\n- Define the four principles of object-oriented programming.\n- Explain how classes and objects factor into object-oriented programming.\n\n### Lesson Guide\n\n| Timing  | Type  | Topic  |\n|:-:|---|---|\n| 5 min  | [Opening](#opening-5-min)  | Learning Objectives |\n| 10 min  | [Introduction](#the-four-principles-of-oop-10-min)  | The Four Principles of OOP |\n| 10 min  | [Demo](#classes-and-modifiers-10-min)  | Classes sand Modifiers |\n| 5 min  | [Conclusion](#conclusion-5-min)  | Review/Recap |\n\n## Opening (5 min)\n\n**Object-oriented programming** (OOP) is a concept that was first introduced in the 1960s with the advent of the Simula programming language and became popular some 25 years later with C++.\n\nWhereas earlier languages were **procedural** in nature, object-oriented programming introduced the concept of **objects** \u2014 compartments of data and functionality that could easily retain and modify their own instance data.\n\n-----\n\n## The Four Principles of OOP (10 min)\n\nThe four pillars of object-oriented programming are:\n\n* Abstraction\n* Polymorphism\n* Inheritance\n* Encapsulation\n\n> Why are they ordered like that? Because it spells \"A PIE.\" If you like pie and acronyms, this might help you remember these four concepts!\n\n### Abstraction\n\nThe idea behind abstraction is that the average person doesn't need to know the inner workings of something in order to use it successfully. For example, you don't have to be a mechanic to drive a car.\n\n### Encapsulation\n\nEncapsulation is related to abstraction but goes a step further. Not only does the average user not need to have access to the inner workings of something in order to use it, if they do have access, it may actually be harmful.\n\nYou could technically start your car with a screwdriver or directly with electricity, but you really shouldn't \u2014 you might hurt yourself or damage your car. Likewise, your users don't always need direct access to sensitive parts of your code.\n\n![](https://res.cloudinary.com/briezh/image/upload/v1560812857/bike-brakes_pvfblg.jpg)\n\n> Image credit goes to [this article](https://dev.to/charanrajgolla/beginners-guide---object-oriented-programming), which we highly recommend reading if this course feels a bit too fast paced.\n\n### Inheritance\n\nInheritance allows classes to \"inherit\" code from one another. The base class is called the **parent** and the inheritor or beneficiary class is called the **child**. It's just one more way of keeping our code shorter and simpler.\n\nThe most frequent use of inheritance is for deriving classes using existing classes, which provides reusability. The existing classes remain unchanged. By promoting reusability in our code, the development time of software is reduced.\n\n### Polymorphism\n\nPolymorphism simply means \"many forms.\" It refers to the fact that a method could have multiple implementations, either differing between a parent and a child class (method overriding) or depending on the type and number of arguments (method overloading).\n\n----\n\n### Understanding Key Object-Oriented Programming Concepts: Polymorphism, Inheritance, Encapsulation, and Abstraction\n\n<details>\n<summary>What is polymorphism and how can it be observed in everyday life?</summary>\n<br>\nPolymorphism in programming refers to the ability of different objects to respond to the same function or method call in their own unique ways. It's like having a universal remote control that can operate different devices (like TVs, DVD players, and stereos) using the same buttons. Each device responds differently to the same command based on its unique functionality.\n</details>\n\n\n<details>\n<summary>What is polymorphism and how can it be observed in everyday life?</summary>\n<br>\nInheritance in programming allows new classes to receive or inherit properties and methods from existing classes, similar to how children inherit traits from their parents. For example, a child might inherit certain physical traits like hair color or height from their parents. Similarly, in programming, a 'Car' class might inherit traits from a 'Vehicle' class, such as the ability to move or stop.\n</details>\n\n<details>\n<summary>How does encapsulation relate to a personal diary?</summary>\n<br>\nEncapsulation in programming is about keeping some components private inside a class and only exposing what is necessary to the outside world. It\u2019s similar to a personal diary. You keep your thoughts and feelings written in the diary private, and you only share what you choose to tell others. This protects the data from being accessed or modified directly.\n</details>\n\n<details>\n<summary>What is abstraction and how is it similar to using a smartphone?</summary>\n<br>\nAbstraction in programming involves hiding complex details behind a simple interface. It\u2019s like using a smartphone; you can call, text, or take photos without knowing the detailed inner workings of the device, such as how it processes signals or captures images. Abstraction allows you to interact with the phone through simple icons and actions.\n</details>\n\n\n## Classes and Modifiers (10 min)\n\nBefore object-oriented programming came along, programming languages like C sported a feature called `struct` \u2014 a way of defining a common format to allocate blocks of consistent data types.\n \nFor example:\n\n```java\nstruct Person { \n    double birthdate;\n    int id; \n    char name[50];\n} \n```\n\nThat would basically allow you to carve out memory for all of the structure's variables (e.g., `birthdate`, `id`, `name`) simply by assigning a new `struct`.\n\nNow that we have data as a `struct`, why not add **functionality** to that structure (e.g., derive a person's age given today's date) and include that functionality inside the `struct` itself? That's exactly what a **class** is \u2014 a data structure with functions or methods.\n\n> In our example of deriving a person's age given today's date, we might create a method called `getCurrentAge()` or something similar.\n\n### Defining a Class\n\nWe've already seen several examples of classes. They all conform to this common pattern:\n\n```java\npublic class MyClass {\n    // guts of the class\n}\n```\n\nIn this example, `public` refers to the class visibility. Top-level classes can only be `public` or default (unspecified). \"Top level\" means they're not inner classes, which we'll define later in this lesson.\n\n`public` classes can be referenced by any other class, and this is the most common class visibility. A file may contain **no more than one** `public` class. The rule is that every top-level `public` Java class must reside in a file that exactly matches the file name (minus the `.java` file type). \n\n#### Default Classes\n\nDefault classes don't specify an access modifier. For example:\n\n```java\nclass MyDefaultClass {}\n```\n\nThey can be accessed in the current file, as well as by other classes in the same package. For this reason, the default visibility level is called \"package\" or \"package-private.\"\n\nPackage and public are the only access levels available for top-level classes. But as we'll see, inner classes can also be `protected` or `private`.\n\n#### Access Levels\n\nThe access levels \u2014 going from most to least restrictive \u2014 are:\n\n```\nprivate --> package --> protected --> public\n```\n\n`private`, `protected`, and `public` are all **access modifiers**, which means you specifically add them in so you can change the access (or protection) level away from the default we described above.\n\nThis nifty table from [Oracle's docs on access control](https://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html) shows what's unique about each level:\n\n![](https://res.cloudinary.com/briezh/image/upload/v1560810976/Screen_Shot_2019-06-17_at_3.35.38_PM_fq9ffm.png)\n\n----\n\n## Conclusion (5 min)\n\nObject-oriented programming is the practice of using classes and objects to make code modular (encapsulated) and often reusable. A class can be thought of as a blueprint for a building or a pattern for a dress. There's one blueprint, but you can build many buildings with it. There's one dress pattern, but you can manufacture many dresses with it.\n\n> **Knowledge Check**: Can you define each of the four OOP pillars?\n> - Abstraction\n> - Polymorphism\n> - Inheritance\n> - Encapsulation\n\n## Additional Resources\n\n* [Oracle Docs: Access Control](https://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html)\n* [OOP for Beginners](https://dev.to/charanrajgolla/beginners-guide---object-oriented-programming)\n* [Four Principles of OOP](https://medium.com/@cancerian0684/what-are-four-basic-principles-of-object-oriented-programming-645af8b43727)\n\n\n"
  },
  {
    "input": "Generate a lesson on React Router DOM. Learning objectives: Understand client-side routing in React, Implement routes with React Router, Create navigation links and handle route parameters, Use programmatic navigation The content should be approximately 650 words with a text-to-code ratio of 0.88. Include 2 images and 1 diagrams.",
    "output": "<h1>\n  <span class=\"prefix\"></span>\n  <span class=\"headline\">React Router DOM</span>\n</h1>\n\n## About\n\nThis module introduces the essentials of React Router, a powerful library used for adding navigation functionality within React applications. You'll learn how to install React Router, use link components for navigation, handle client-side routing, and implement dynamic routes.\n\nAdditionally, the lessons will cover programmatic navigation to manage redirects, making the user experience in your single-page applications more like multi-page applications. Each topic is designed to build on your existing knowledge of React components, controlled forms, and passing props.\n\n## Content\n\n| Lesson                                                         | Skills                                                                |\n| -------------------------------------------------------------- | --------------------------------------------------------------------- |\n| [Setup](./setup/README.md)                                     | Setting up the development environment.                               |\n| [Concepts](./concepts/README.md)                               | Describing usefulness of React Router.                                |\n| [Installing React Router](./installing-react-router/README.md) | Adding React Router to an application.                                |\n| [Creating Links](./creating-links/README.md)                   | Implementing `Link` components for navigation.                        |\n| [Creating Routes](./creating-routes/README.md)                 | Creating Routes with the `Routes` and `Route` components.             |\n| [Route Parameters](./route-parameters/README.md)               | Creating dynamic routes using dynamic segments.                       |\n| [Programmatic Navigation](./programmatic-navigation/README.md) | Redirecting automatically with React Router's `useNavigation()` hook. |\n\n## References\n\n\ud83d\udcd6 [Reference Materials](./references/README.md)\n\n## Internal\n\n### Prerequisites\n\n- Controlled Forms in React\n- Lifting State in React\n\n### Solution code\n\n\ud83c\udfc1 [Solution code](https://git.generalassemb.ly/modular-curriculum-all-courses/react-router-dom-solution)\n\n### Course landing pages\n\n- [SEB - Software Engineering Bootcamp](https://pages.git.generalassemb.ly/modular-curriculum-all-courses/react-router-dom/canvas-landing-pages/seb.html)\n- [RDS - React Development Short Course](https://pages.git.generalassemb.ly/modular-curriculum-all-courses/react-router-dom/canvas-landing-pages/rds.html)\n- [Fallback](https://pages.git.generalassemb.ly/modular-curriculum-all-courses/react-router-dom/canvas-landing-pages/fallback.html)\n\n### Resources\n\n\u270f\ufe0f [Instructor Guide](./internal-resources/instructor-guide.md)\n\n\ud83c\udfa5 [Video Hub](./internal-resources/video-hub.md)\n\n\ud83c\udfd7\ufe0f [Release Notes](./internal-resources/release-notes.md)\n\n---\n\n**Find a \ud83d\udc7e bug \ud83d\udc7e or have suggestions? [Let us know](https://pages.git.generalassemb.ly/modular-curriculum-all-courses/universal-resources-internal/module-feedback.html)!**\n"
  },
  {
    "input": "Generate a capstone on Full Stack Application Development. Learning objectives: Develop a full-stack application with a financial theme, Apply all technologies covered in the course, Implement best practices in software development The content should be approximately 850 words with a text-to-code ratio of 0.99. Include 0 images and 0 diagrams. Design this for a facilitative teaching approach with 2 demonstration points. The instructor will need 120 minutes to prepare. The content should follow a sustained high cognitive load pattern with high student autonomy and high interactivity.",
    "output": "# Capstone Starter Code\n\n## Submitting your project\n\n**Project is due on Friday of Week 4**\n\n[Link to Capstone Requirements PDF](./assets/Capstone-Project-Guidelines.pdf)\n\nPlease **fork** and **clone** this repo. To submit your work, please submit a Pull Request with your full name on this repo. You will also present your application during class.\n\n[Pull Request Instructions](https://git.generalassemb.ly/ModernEngineering/start-here/#submitting-your-work-via-pull-request)\n\n_Note: The use of this starter code is optional! Feel free to build your own app from scratch as you see fit._\n\n## Requirements\n\nYou will develop a new full-stack application that leverages all the technologies covered in the course. Prudential has asked that you build an application with a financial theme (e.g. budget tracker app, bill tracker app, etc.). All code will be submitted to your fork of this GitHub repository on GA\u2019s GitHub Enterprise servers. \n\n[The grading rubric can be found in the Capstone Requirements PDF here](./assets/Capstone-Project-Guidelines.pdf)\n\n- Data Model:\n   - Implement and use a PostgreSQL database for storage\n   - Demonstrate your API can write to and read from the database\n- API Endpoints:\n   - Using Express, implement working API endpoints corresponding to CRUD operations\n- React User Interface:\n   - CRUD operations are accessible to a user from a React front-end\n   - _Styling will not be part of the evaluation_\n   - _React Router does not need to be included_\n- Testing:\n   - 3 Jest Unit tests on the React app\n   - 3 Jest Unit tests on the Express app\n   - 1 End-to-End browser test with Selenium\n- Containerization:\n   - Create 3 Dockerfiles (backend, db, frontend) to containerize your application\n   - \n_Note: Reach Out To Instructors To Show Passing Tests Before Proceeding To Containerization._\n\n## Reference Links\n\nRefer to previous lessons to guide you as you build out your full-stack application.\n\n- Backend\n   - [Express Todo Api Lesson](https://git.generalassemb.ly/ModernEngineering/express-to-do-api)\n   - [Testing Express With Supertest](https://git.generalassemb.ly/ModernEngineering/todo-express-api-testing-with-supertest)\n- Frontend\n   - [Connect React frontend to Express API backen](https://git.generalassemb.ly/ModernEngineering/full-stack-react)\n   - [React Jest Testing](https://git.generalassemb.ly/ModernEngineering/jest-react-lab)\n   - [Testing React With Jest Walkthrough](https://git.generalassemb.ly/ModernEngineering/testing-react-with-jest-walkthrough)\n- Full-stack\n   - [Selenium Walkthrough](https://git.generalassemb.ly/ModernEngineering/selenium-walkthrough)\n   - [Dockerize Todo App](https://git.generalassemb.ly/ModernEngineering/dockerize-to-do-app)\n\n## Getting Started\n\n### Backend Express API\n\n1. `cd backend`\n1. `npm i`\n1. `npm run start` will start the server on port 3001\n\n<br>\n\n### Database\n\n- Use the `backend/db/capstone.sql` file to create the schema in your database.\n- Run the `db/capstone.sql` file to create the database, table and data: `psql -U postgres -d name_of_your_app_db < db/capstone.sql`\n\n  _Note 1: If you're asked, the default password for the `postgres` user is either `password` or `postgres`_\n\n  _Note 2: In `index.js`, you have 2 `pool` variables: one for local development and one when you build your backend `Dockerfile`\n\n<br>\n\n### React Frontend\n\n1. `cd frontend`\n1. `npm i`\n1. `npm run start` will start the server on port 3000\n\n## Presentations\n\nPresentations will start on Thursday on a volunteers-first basis. Those who do not present on Thursday will have to present on Friday. Everyone will be asked to share their screen and demo their app. Each person will have 3-5 minutes including Q&A.\n\nWe ask that you demo the following:\n\n- Run `sudo docker ps` to show that you have running Docker containers for the DB, backend, and frontend.\n- Demo that you can Create, Read, Update and Delete on a resource.\n- What are the biggest challenges and biggest wins from your capstone app?\n- Give shoutouts to any peers that helped you out throughout capstone week.\n\n_NOTE: In the interest of time, you are not required to demo your test suites, but you should still have working frontend, backend, and end-to-end tests in your repo.\n\n## Squads\n\nWe've assigned everyone to an instructor so that we get more familiar with individual apps and better provide assistance. Here is when we'll check in.\n\n1. We will check into the main room at 9am EST for attendance. Afterward, we'll split up into squads (in breakouts) for a standup. Here you can address:\n   - What you've completed so far?\n   - What you plan to work on that day\n   - Any blockers\n\n1. We will also have a 1:30pm EST check in after lunch in the Zoom chat each day for attendance.\n\n1. We'll meet in the main room at 4:30pm EST each day for the daily exit ticket. For question \"10. Any other general questions or comments to share?\", please briefly let us know the following:\n   - What did you accomplish today?\n   - Did you hit any blockers?\n   - What\u2019s your plan for tomorrow?\n\n### Squad Assignments\n\n#### Ben\n- Akash\n- Srivalya\n- Arun\n- Richard\n- Ellen\n- Lisa\n- Grant\n- Joe\n- Jason\n\n#### Mario\n- Alpesh\n- Bradley\n- Srinivas\n- Lino\n- Razvan\n- Ed\n- Karen\n- Greg\n\n#### Troy\n- Arpita\n- Sangeetha\n- Priyank\n- Brent\n- Joel\n- Juhi\n- Harish\n- Henri\n- Ken\n"
  },
  {
    "input": "Generate a course_landing for Advanced Java. Course description: A comprehensive course on advanced Java concepts, algorithms, and data structures. Learning path: Algorithms and Pseudocode, Stacks and Queues, Linked Lists, Binary Search, Sorting Algorithms, Tree Algorithms, Mini-Project The content should be approximately 225 words with a text-to-code ratio of 1.0. Include 0 images and 0 diagrams. Design this for a structured teaching approach with 0 demonstration points. The instructor will need 180 minutes to prepare. The content should follow a preview cognitive load pattern with low student autonomy and low interactivity.",
    "output": "# Advanced Java Class Schedule\n\n**Below is the schedule of activities for the week:**\n\n| Time  | Monday | Tuesday | Wednesday | Thursday | Friday |\n|-------|--------|---------|-----------|----------|--------|\n| 9:00  |Setup/Welcome|\ud83d\udfe6 [Understanding Linked Lists](https://git.generalassemb.ly/ENT-Advanced-JAVA/understanding-linked-list)|\ud83d\udfe6 [Understanding Binary Search](https://git.generalassemb.ly/ENT-Advanced-JAVA/binary-search)|\ud83d\udfe6 [Bubble Sort](https://git.generalassemb.ly/ENT-Advanced-JAVA/bubble-sort/)|\ud83d\udfe9 [Mini-Project Day](https://git.generalassemb.ly/ENT-Advanced-JAVA/mini-project)|\n| 9:30  |\ud83d\udfe6 [Fundamentals of Algorithms and Pseudocode](https://git.generalassemb.ly/ENT-Advanced-JAVA/fundamentals-of-algorithms-pseudocode)|\ud83d\udfe6 Cont.|\ud83d\udfe6 Cont.|\ud83d\udfe6 [Selection Sort](https://git.generalassemb.ly/ENT-Advanced-JAVA/selection-sort)| \ud83d\udfe9 Cont.|\n| 10:00 |\ud83d\udfe6 Cont.  |\ud83d\udfe6 Cont.|\ud83d\udfe6 [Exploring Recursion](https://git.generalassemb.ly/ENT-Advanced-JAVA/recursion)|\ud83d\udfe6 [Quick Sort](https://git.generalassemb.ly/ENT-Advanced-JAVA/quicksort/)|\ud83d\udfe9  Cont. |\n| 10:30 |\ud83d\udfe6 Cont.  |\ud83d\udfe6 Cont.|\ud83d\udfe6 Cont.|\ud83d\udfe6 [Merge Sort](https://git.generalassemb.ly/ENT-Advanced-JAVA/merge-sort/)|\ud83d\udfe9  Cont.|\n| 11:00 |\ud83d\udfe6 [Understanding Stacks](https://git.generalassemb.ly/ENT-Advanced-JAVA/atd-stack)|\ud83d\udfe6 [Introduction to Doubly Linked Lists](https://git.generalassemb.ly/ENT-Advanced-JAVA/intro-doubly-linked-lists)|\ud83d\udfe9 [Recursive Functions Lab](https://git.generalassemb.ly/ENT-Advanced-JAVA/day03-lab)|\ud83d\udfe9 [Infix to Postfix Lab](https://git.generalassemb.ly/ENT-Advanced-JAVA/day04-lab)|\ud83d\udfe9  Cont.         |\n| 12:00 | Lunch Break| Lunch Break| Lunch Break | Lunch Break| Lunch Break |\n| 1:00  |\ud83d\udfe6 [Understanding Stacks](https://git.generalassemb.ly/ENT-Advanced-JAVA/atd-stack)|\ud83d\udfe9 [Manipulating Linked lists](https://git.generalassemb.ly/ENT-Advanced-JAVA/day02-lab)|\ud83d\udfe9 [Recursive Functions Lab](https://git.generalassemb.ly/ENT-Advanced-JAVA/day03-lab)|\ud83d\udfe9 [Infix to Postfix Lab](https://git.generalassemb.ly/ENT-Advanced-JAVA/day04-lab)|\ud83d\udfe9  Cont.         |\n| 2:00  |\ud83d\udfe6 [Implementing Queues in Java](https://git.generalassemb.ly/ENT-Advanced-JAVA/adt-queue)|\ud83d\udfe9 Cont.         |\ud83d\udfe6 [Tree Algorithms](https://git.generalassemb.ly/ENT-Advanced-JAVA/tree-algorithms)|\ud83d\udfe6 [Mini-Project Setup](https://git.generalassemb.ly/ENT-Advanced-JAVA/sudoko-project-starter-code)|\ud83d\udfe9  Cont.         |\n| 3:00  |\ud83d\udfe6 Cont.|\ud83d\udfe9 Cont. |\ud83d\udfe6 Cont. |\ud83d\udfe6 Cont. |\ud83d\udfe6 [Presenting](https://git.generalassemb.ly/ENT-Advanced-JAVA/mini-project/blob/main/README.md#presentation-and-reflection) |\n| 4:00  |\ud83d\udfe9 [Array Manipulation Lab](https://git.generalassemb.ly/ENT-Advanced-JAVA/day01-lab.md)|\ud83d\udfe9  Cont.|\ud83d\udfe6 Cont.|\ud83d\udfe6 Cont.|\ud83d\udfe6 Reflection        |\n| 4:30  |\ud83d\udfe9 Cont.|\ud83d\udfe9  Cont.|\ud83d\udfe6 Cont. |\ud83d\udfe6 Cont. |\ud83d\udfe6 Bring it Home|\n\n\nEach session is marked with a colored square indicating the type of activity:\n\n- \ud83d\udfe6 Lesson - Instruction: Instructor-Led Lecture, Guided Walk Through, and Modelling\n- \ud83d\udfe9 Practice - Application: Solo Work, Pair Activity, Group Activity\n\n**For Copying & Pasting Code, Resources, and More Check out\nthis [Resource Google Sheet](https://docs.google.com/spreadsheets/d/11ha4E_HhYW1kfEQV5raAYAgOpVJEzKaOQShEE_mdIMw/edit?usp=drive_link)**\n"
  },
  {
    "input": "Create a lab about Django CRUD with Django Rest Framework that covers these objectives: Build a full-stack Django application with authentication using Django Rest Framework (DRF), Implement One-to-Many and Many-to-Many relationships with DRF serializers, Manage user authorization and data protection with DRF The content should be approximately 600 words with a text-to-code ratio of 0.95. Include 1 images and 0 diagrams. Design this for a deductive teaching approach with 6 demonstration points. The instructor will need 90 minutes to prepare. The content should be approximately 600 words with a text-to-code ratio of 0.95. Include 1 images and 0 diagrams.  Design this for a deductive teaching approach with 6 demonstration points. The instructor will need 90 minutes to prepare.  The content should follow a stepped increase cognitive load pattern with medium student autonomy and medium interactivity.",
    "output": "# ![](https://ga-dash.s3.amazonaws.com/production/assets/logo-9f88ae6c9c3871690e33280fcf557f33.png) Django CRUD Lab\n\n| Title               | Type   | Duration | Author               |\n|---------------------|--------|----------|----------------------|\n| Django CRUD DEF Lab | Lesson | 6:00     | Suresh Melvin Sigera |\n\n### Learning Objectives\n\n- Build a full-stack Django application with authentication using Django Rest Framework (DRF).\n- Implement One-to-Many and Many-to-Many relationships with DRF serializers.\n- Manage user authorization and data protection with DRF.\n\n#### Day 1: Django Setup, URLs, Views, and DRF Intro\n\n- Set up Django project and app.\n- Configure URLs for Django and DRF endpoints.\n- Introduction to Django models and serializers.\n- Create Dog model with fields: name, breed, description, age.\n- Implement basic CRUD views using DRF:\n    - List (index)\n    - Detail\n    - Create\n    - Update\n    - Delete\n- Set up user authentication (registration and login) via DRF for creating dogs.\n- Add dog feeding functionality with datetime tracking via API endpoints.\n\n#### Day 2: Many-to-Many Relationships with DRF\n\n- Create Toy model with fields: name, color.\n- Add Many-to-Many relationship between Dog and Toy models.\n- Create CRUD API endpoints for managing toys.\n- Implement toy assignment to dogs through DRF endpoints.\n- Display assigned toys on dog detail page through DRF serializers.\n\n#### Day 3: Authentication & Authorization with DRF\n\n- Implement user signup, login, and logout using DRF's authentication system.\n- Add user-specific API views, ensuring that each user can only access their own data.\n- Restrict dog and toy operations to authenticated users using DRF permissions.\n- Add a user profile API endpoint showing the authenticated user's dogs.\n\n## How to submit homework\n\n### Submitting work\n\n- Step 1. Create a new repository on your GitHub Enterprise account named \"dog-collector-drf.\"\n- Step 2. Push your project to the newly created repository.\n- Step 3. Create an issue in this repository\n- Step 3.1. Add a title (First name, Last Name) and your repository URL\n\nIn the comment section, you must add the following:\n\n```text\n* Comfort level [0 to 5]\n* Completeness [0 to 5]\n* What was a win?\n* What was a challenge?\n* Any other comments\n```\n"
  },
  {
    "input": "I need a lab on Django CRUD with Django Rest Framework. Make sure it addresses: Build a full-stack Django application with authentication using Django Rest Framework (DRF), Implement One-to-Many and Many-to-Many relationships with DRF serializers, Manage user authorization and data protection with DRF The content should be approximately 600 words with a text-to-code ratio of 0.95. Include 1 images and 0 diagrams. Design this for a deductive teaching approach with 6 demonstration points. The instructor will need 90 minutes to prepare. The content should be approximately 600 words with a text-to-code ratio of 0.95. Include 1 images and 0 diagrams.  Design this for a deductive teaching approach with 6 demonstration points. The instructor will need 90 minutes to prepare.  The content should follow a stepped increase cognitive load pattern with medium student autonomy and medium interactivity.",
    "output": "# ![](https://ga-dash.s3.amazonaws.com/production/assets/logo-9f88ae6c9c3871690e33280fcf557f33.png) Django CRUD Lab\n\n| Title               | Type   | Duration | Author               |\n|---------------------|--------|----------|----------------------|\n| Django CRUD DEF Lab | Lesson | 6:00     | Suresh Melvin Sigera |\n\n### Learning Objectives\n\n- Build a full-stack Django application with authentication using Django Rest Framework (DRF).\n- Implement One-to-Many and Many-to-Many relationships with DRF serializers.\n- Manage user authorization and data protection with DRF.\n\n#### Day 1: Django Setup, URLs, Views, and DRF Intro\n\n- Set up Django project and app.\n- Configure URLs for Django and DRF endpoints.\n- Introduction to Django models and serializers.\n- Create Dog model with fields: name, breed, description, age.\n- Implement basic CRUD views using DRF:\n    - List (index)\n    - Detail\n    - Create\n    - Update\n    - Delete\n- Set up user authentication (registration and login) via DRF for creating dogs.\n- Add dog feeding functionality with datetime tracking via API endpoints.\n\n#### Day 2: Many-to-Many Relationships with DRF\n\n- Create Toy model with fields: name, color.\n- Add Many-to-Many relationship between Dog and Toy models.\n- Create CRUD API endpoints for managing toys.\n- Implement toy assignment to dogs through DRF endpoints.\n- Display assigned toys on dog detail page through DRF serializers.\n\n#### Day 3: Authentication & Authorization with DRF\n\n- Implement user signup, login, and logout using DRF's authentication system.\n- Add user-specific API views, ensuring that each user can only access their own data.\n- Restrict dog and toy operations to authenticated users using DRF permissions.\n- Add a user profile API endpoint showing the authenticated user's dogs.\n\n## How to submit homework\n\n### Submitting work\n\n- Step 1. Create a new repository on your GitHub Enterprise account named \"dog-collector-drf.\"\n- Step 2. Push your project to the newly created repository.\n- Step 3. Create an issue in this repository\n- Step 3.1. Add a title (First name, Last Name) and your repository URL\n\nIn the comment section, you must add the following:\n\n```text\n* Comfort level [0 to 5]\n* Completeness [0 to 5]\n* What was a win?\n* What was a challenge?\n* Any other comments\n```\n"
  },
  {
    "input": "Create a lab about Python Unit Testing that covers these objectives: Write unit tests for Python functions, Understand test-driven development principles, Use Python's unittest framework The content should be approximately 400 words with a text-to-code ratio of 0.89. Include 0 images and 0 diagrams. Design this for a inductive teaching approach with 4 demonstration points. The instructor will need 30 minutes to prepare. The content should be approximately 400 words with a text-to-code ratio of 0.89. Include 0 images and 0 diagrams.  Design this for a inductive teaching approach with 4 demonstration points. The instructor will need 30 minutes to prepare.  The content should follow a consistent cognitive load pattern with medium student autonomy and medium interactivity.",
    "output": "# ![](https://ga-dash.s3.amazonaws.com/production/assets/logo-9f88ae6c9c3871690e33280fcf557f33.png) Python Unit Testing Lab I\n\n| Title                     | Type   | Duration | Author               |\n|---------------------------|--------|----------|----------------------|\n| Python Unit Testing Lab I | Lesson | 2:30     | Suresh Melvin Sigera |\n\n## Part 1\n\n- Write a program that counts up the number of vowels contained in the string `s`. Valid vowels are: `'a', 'e', 'i', 'o',\n  and 'u'`. For example, if `s = 'azcbobobegghakl'`, your program should print: `Number of vowels: 5`.\n\n- Write a program that prints the number of times the string `bob` occurs in `s`. For example,\n  if `s = 'azcbobobegghakl'`, then your program should print `Number of times bob occurs is: 2`.\n\n- Ask the user to input a string and then reversal the given input. `Input: \"Programming in Python\"`, `Output: nohtyP ni\n  gnimmargorP`.\n\n- Write a program that accepts a sentence and calculate the number of uppercase letters and lowercase letters. Suppose\n  the\n  following input is supplied to the program. `Input: Hello World`, `Output: UPPERCASE: 2, LOWERCASE: 9`. You may count\n  space as lowercase.\n\n- Write a program that accepts a comma-separated sequence of words as input and prints the words in a comma-separated\n  sequence after sorting them alphabetically. Suppose the following input is supplied to the program: `without, hello,\n  bag, world` Then, the output should be: `bag, hello, without, world`.\n\n- Ask the user to enter a string, and check if it is a palindrome. If yes, print `True`, or else print `False`.\n\n## Part 2\n\nUsing the solutions from Part 1, write unit tests for each of the six programs to verify that they work correctly.\n\n## How to submit homework\n\n### Setup\n\n- Step 1. Fork the repository\n- Step 2. Clone your fork\n\n### Submitting work\n\n- Step 1. Complete your work in `test\\unit` directory, you should have six test classes in total\n- Step 2. Push to your fork\n- Step 3. Submit a pull request\n- Step 3.1. Add a title (First name, Last Name) and comment\n\nIn the comment section, you must add the following:\n\n```text\n* Comfort level [0 to 5]\n* Completeness [0 to 5]\n* What was a win?\n* What was a challenge?\n* Any other comments\n```\n"
  },
  {
    "input": "I need a lab on Python Unit Testing. Make sure it addresses: Write unit tests for Python functions, Understand test-driven development principles, Use Python's unittest framework The content should be approximately 400 words with a text-to-code ratio of 0.89. Include 0 images and 0 diagrams. Design this for a inductive teaching approach with 4 demonstration points. The instructor will need 30 minutes to prepare. The content should be approximately 400 words with a text-to-code ratio of 0.89. Include 0 images and 0 diagrams.  Design this for a inductive teaching approach with 4 demonstration points. The instructor will need 30 minutes to prepare.  The content should follow a consistent cognitive load pattern with medium student autonomy and medium interactivity.",
    "output": "# ![](https://ga-dash.s3.amazonaws.com/production/assets/logo-9f88ae6c9c3871690e33280fcf557f33.png) Python Unit Testing Lab I\n\n| Title                     | Type   | Duration | Author               |\n|---------------------------|--------|----------|----------------------|\n| Python Unit Testing Lab I | Lesson | 2:30     | Suresh Melvin Sigera |\n\n## Part 1\n\n- Write a program that counts up the number of vowels contained in the string `s`. Valid vowels are: `'a', 'e', 'i', 'o',\n  and 'u'`. For example, if `s = 'azcbobobegghakl'`, your program should print: `Number of vowels: 5`.\n\n- Write a program that prints the number of times the string `bob` occurs in `s`. For example,\n  if `s = 'azcbobobegghakl'`, then your program should print `Number of times bob occurs is: 2`.\n\n- Ask the user to input a string and then reversal the given input. `Input: \"Programming in Python\"`, `Output: nohtyP ni\n  gnimmargorP`.\n\n- Write a program that accepts a sentence and calculate the number of uppercase letters and lowercase letters. Suppose\n  the\n  following input is supplied to the program. `Input: Hello World`, `Output: UPPERCASE: 2, LOWERCASE: 9`. You may count\n  space as lowercase.\n\n- Write a program that accepts a comma-separated sequence of words as input and prints the words in a comma-separated\n  sequence after sorting them alphabetically. Suppose the following input is supplied to the program: `without, hello,\n  bag, world` Then, the output should be: `bag, hello, without, world`.\n\n- Ask the user to enter a string, and check if it is a palindrome. If yes, print `True`, or else print `False`.\n\n## Part 2\n\nUsing the solutions from Part 1, write unit tests for each of the six programs to verify that they work correctly.\n\n## How to submit homework\n\n### Setup\n\n- Step 1. Fork the repository\n- Step 2. Clone your fork\n\n### Submitting work\n\n- Step 1. Complete your work in `test\\unit` directory, you should have six test classes in total\n- Step 2. Push to your fork\n- Step 3. Submit a pull request\n- Step 3.1. Add a title (First name, Last Name) and comment\n\nIn the comment section, you must add the following:\n\n```text\n* Comfort level [0 to 5]\n* Completeness [0 to 5]\n* What was a win?\n* What was a challenge?\n* Any other comments\n```\n"
  },
  {
    "input": "Create a lab about Testing REST API Views that covers these objectives: Write tests for REST API endpoints, Understand API testing best practices, Implement test cases for CRUD operations The content should be approximately 500 words with a text-to-code ratio of 0.88. Include 0 images and 0 diagrams. Design this for a deductive teaching approach with 5 demonstration points. The instructor will need 60 minutes to prepare. The content should be approximately 500 words with a text-to-code ratio of 0.88. Include 0 images and 0 diagrams.  Design this for a deductive teaching approach with 5 demonstration points. The instructor will need 60 minutes to prepare.  The content should follow a stepped increase cognitive load pattern with medium student autonomy and medium interactivity.",
    "output": "# ![](https://ga-dash.s3.amazonaws.com/production/assets/logo-9f88ae6c9c3871690e33280fcf557f33.png) Cat API Testing Lab\n\n| Title               | Type | Duration | Author               |\n|---------------------|------|----------|----------------------|\n| Cat API Testing Lab | Lab  | 3:00     | Suresh Melvin Sigera |\n\nIn this hands-on lab, students will test a Django REST API for a Cat Collector application. The lab covers testing CRUD\noperations, relationships between models (`Cats`, `Toys`, `Feedings`), and proper authentication/authorization flows. \n\nStudents will use Django's test framework along with REST framework test utilities to verify API functionality.\n\n### Learning Objectives\n\nUpon completion of this lab, students will be able to:\n\n- **API Testing Fundamentals**\n    - Execute CRUD operations using REST API endpoints\n    - Verify API responses and status codes\n    - Understand API authentication and authorization flows\n    - Test API endpoint relationships and data persistence\n\n- **REST Resource Management**\n    - Test creation and management of primary resources (Cats)\n    - Verify relationships between resources (Cats and Toys)\n    - Validate nested resource operations (Feedings)\n    - Confirm proper data persistence and retrieval\n\n- **Prerequisites**\n    - Basic understanding of HTTP methods (GET, POST, PUT, DELETE)\n    - Familiarity with JSON data format\n    - Access to API testing tool (Postman, cURL, or similar)\n    - Valid user account credentials\n\n**Exercise 1: Start by getting your access token**\n**Exercise 2: Cat CRUD Operations**\n\n| Method | Endpoint  | Description           |\n|--------|-----------|-----------------------|\n| POST   | /cats     | Create a new cat      |\n| GET    | /cats     | Retrieve all cats     |\n| GET    | /cats/:id | Retrieve a single cat |\n| PUT    | /cats/:id | Update a cat          |\n| DELETE | /cats/:id | Delete a cat          |\n\n**Exercise 2: Cat Toy Relationships**\n\n| Method | Endpoint  | Description           |\n  |--------|-----------|-----------------------|\n| POST   | /toys     | Create a new toy      |\n| GET    | /toys     | Retrieve all toys     |\n| GET    | /toys/:id | Retrieve a single toy |\n| PUT    | /toys/:id | Update a toy          |\n| DELETE | /toys/:id | Delete a toy          |\n\n**Exercise 3: Cat Feeding Operations**\n\n| Method | Endpoint      | Description               |\n|--------|---------------|---------------------------|\n| POST   | /feedings     | Create a new feeding      |\n| GET    | /feedings     | Retrieve all feedings     |\n| GET    | /feedings/:id | Retrieve a single feeding |\n| PUT    | /feedings/:id | Update a feeding          |\n| DELETE | /feedings/:id | Delete a feeding          |\n\n**Exercise 4: Permission Testing**\n\n| Method | Endpoint                   | Description             |\n|--------|----------------------------|-------------------------|\n| GET    | /cats/                     | Try Without Token       |\n| GET    | /cats/[other_user_cat_id]/ | Access Other User's Cat |\n| PUT    | /cats/[other_user_cat_id]/ | Update Other User's Cat |\n\n**Testing Sequence**\n\n- Basic CRUD Flow\n    - Create a new cat\n    - Verify cat details\n    - Update cat information\n    - Delete cat\n- Toy Relationships\n    - Create multiple toys\n    - Add toys to cat\n    - Verify toy list\n    - Remove toys\n- Feeding Management\n    - Add multiple feedings\n    - Verify feeding records\n    - Update feeding details\n    - Remove feedings\n- Error Cases\n    - Try invalid data formats\n    - Test permission boundaries\n    - Attempt unauthorized operations\n\n**Extension Activities**\n\n- Create a cat with multiple toys and feedings\n- Try batch operations (multiple updates)\n- Test different feeding patterns\n- Verify cascade deletions\n\n### How to submit homework\n\n#### Setup\n\n- Step 1. Fork the repository\n- Step 2. Clone your fork\n\n#### Submitting work\n\n- Step 3. Push to your fork\n- Step 4. Submit a pull request\n- Step 4.1. Under the title, add your first and last name with the comment\n\nIn the comment section, you must add the following:\n\n```text\n* Comfortability [0 to 5]\n* Completeness [0 to 5]\n* What was a win?\n* What was a challenge?\n* Any other comments\n```"
  },
  {
    "input": "I need a lab on Testing REST API Views. Make sure it addresses: Write tests for REST API endpoints, Understand API testing best practices, Implement test cases for CRUD operations The content should be approximately 500 words with a text-to-code ratio of 0.88. Include 0 images and 0 diagrams. Design this for a deductive teaching approach with 5 demonstration points. The instructor will need 60 minutes to prepare. The content should be approximately 500 words with a text-to-code ratio of 0.88. Include 0 images and 0 diagrams.  Design this for a deductive teaching approach with 5 demonstration points. The instructor will need 60 minutes to prepare.  The content should follow a stepped increase cognitive load pattern with medium student autonomy and medium interactivity.",
    "output": "# ![](https://ga-dash.s3.amazonaws.com/production/assets/logo-9f88ae6c9c3871690e33280fcf557f33.png) Cat API Testing Lab\n\n| Title               | Type | Duration | Author               |\n|---------------------|------|----------|----------------------|\n| Cat API Testing Lab | Lab  | 3:00     | Suresh Melvin Sigera |\n\nIn this hands-on lab, students will test a Django REST API for a Cat Collector application. The lab covers testing CRUD\noperations, relationships between models (`Cats`, `Toys`, `Feedings`), and proper authentication/authorization flows. \n\nStudents will use Django's test framework along with REST framework test utilities to verify API functionality.\n\n### Learning Objectives\n\nUpon completion of this lab, students will be able to:\n\n- **API Testing Fundamentals**\n    - Execute CRUD operations using REST API endpoints\n    - Verify API responses and status codes\n    - Understand API authentication and authorization flows\n    - Test API endpoint relationships and data persistence\n\n- **REST Resource Management**\n    - Test creation and management of primary resources (Cats)\n    - Verify relationships between resources (Cats and Toys)\n    - Validate nested resource operations (Feedings)\n    - Confirm proper data persistence and retrieval\n\n- **Prerequisites**\n    - Basic understanding of HTTP methods (GET, POST, PUT, DELETE)\n    - Familiarity with JSON data format\n    - Access to API testing tool (Postman, cURL, or similar)\n    - Valid user account credentials\n\n**Exercise 1: Start by getting your access token**\n**Exercise 2: Cat CRUD Operations**\n\n| Method | Endpoint  | Description           |\n|--------|-----------|-----------------------|\n| POST   | /cats     | Create a new cat      |\n| GET    | /cats     | Retrieve all cats     |\n| GET    | /cats/:id | Retrieve a single cat |\n| PUT    | /cats/:id | Update a cat          |\n| DELETE | /cats/:id | Delete a cat          |\n\n**Exercise 2: Cat Toy Relationships**\n\n| Method | Endpoint  | Description           |\n  |--------|-----------|-----------------------|\n| POST   | /toys     | Create a new toy      |\n| GET    | /toys     | Retrieve all toys     |\n| GET    | /toys/:id | Retrieve a single toy |\n| PUT    | /toys/:id | Update a toy          |\n| DELETE | /toys/:id | Delete a toy          |\n\n**Exercise 3: Cat Feeding Operations**\n\n| Method | Endpoint      | Description               |\n|--------|---------------|---------------------------|\n| POST   | /feedings     | Create a new feeding      |\n| GET    | /feedings     | Retrieve all feedings     |\n| GET    | /feedings/:id | Retrieve a single feeding |\n| PUT    | /feedings/:id | Update a feeding          |\n| DELETE | /feedings/:id | Delete a feeding          |\n\n**Exercise 4: Permission Testing**\n\n| Method | Endpoint                   | Description             |\n|--------|----------------------------|-------------------------|\n| GET    | /cats/                     | Try Without Token       |\n| GET    | /cats/[other_user_cat_id]/ | Access Other User's Cat |\n| PUT    | /cats/[other_user_cat_id]/ | Update Other User's Cat |\n\n**Testing Sequence**\n\n- Basic CRUD Flow\n    - Create a new cat\n    - Verify cat details\n    - Update cat information\n    - Delete cat\n- Toy Relationships\n    - Create multiple toys\n    - Add toys to cat\n    - Verify toy list\n    - Remove toys\n- Feeding Management\n    - Add multiple feedings\n    - Verify feeding records\n    - Update feeding details\n    - Remove feedings\n- Error Cases\n    - Try invalid data formats\n    - Test permission boundaries\n    - Attempt unauthorized operations\n\n**Extension Activities**\n\n- Create a cat with multiple toys and feedings\n- Try batch operations (multiple updates)\n- Test different feeding patterns\n- Verify cascade deletions\n\n### How to submit homework\n\n#### Setup\n\n- Step 1. Fork the repository\n- Step 2. Clone your fork\n\n#### Submitting work\n\n- Step 3. Push to your fork\n- Step 4. Submit a pull request\n- Step 4.1. Under the title, add your first and last name with the comment\n\nIn the comment section, you must add the following:\n\n```text\n* Comfortability [0 to 5]\n* Completeness [0 to 5]\n* What was a win?\n* What was a challenge?\n* Any other comments\n```"
  },
  {
    "input": "Create a lab about Modern JavaScript Syntax that covers these objectives: Use ES6+ features in JavaScript, Implement modern JavaScript patterns, Understand JavaScript best practices The content should be approximately 450 words with a text-to-code ratio of 0.88. Include 0 images and 0 diagrams. Design this for a comparative teaching approach with 6 demonstration points. The instructor will need 40 minutes to prepare. The content should be approximately 450 words with a text-to-code ratio of 0.88. Include 0 images and 0 diagrams.  Design this for a comparative teaching approach with 6 demonstration points. The instructor will need 40 minutes to prepare.  The content should follow a feature by feature cognitive load pattern with medium student autonomy and high interactivity.",
    "output": "<h1>\n  <span class=\"prefix\"></span>\n  <span class=\"headline\">Modern JavaScript Syntax Lab</span>\n</h1>\n\n## About\n\nOver the last decade, JavaScript has seen significant changes in its syntax to make it more user-friendly, responding to developers' needs. These updates have become standard in popular frameworks like React, Vue, and Angular. It\u2019s key to understand that these changes primarily enhance coding efficiency rather than add new functionality to the language.\n\nThis lab is your opportunity to dive into modern JavaScript syntax. Understanding this contemporary style is beneficial, but a solid grasp of traditional JavaScript is essential. It lays a strong foundation not only for JavaScript but also for learning other programming languages.\n\n## Content\n\n- [Setup](./setup/README.md)\n- [Exercise](./exercise/README.md)\n\n## Internal\n\n### Prerequisites\n\nNone\n\n### Time to complete\n\nEstimated time to complete core lab exercise: **60 min**\n\n### Solution code\n\n\ud83c\udfc1 [Solution Code](https://git.generalassemb.ly/modular-curriculum-all-courses/modern-javascript-syntax-lab-solution)\n\n### Course landing pages\n\n- [RDS - React Development Short Course](https://pages.git.generalassemb.ly/modular-curriculum-all-courses/modern-javascript-syntax-lab/canvas-landing-pages/rds.html)\n- [SEB - Software Engineering Bootcamp](https://pages.git.generalassemb.ly/modular-curriculum-all-courses/modern-javascript-syntax-lab/canvas-landing-pages/seb.html)\n- [Fallback](https://pages.git.generalassemb.ly/modular-curriculum-all-courses/modern-javascript-syntax-lab/canvas-landing-pages/fallback.html)\n\n### Resources\n\n\u270f\ufe0f [Instructor Guide](./internal-resources/instructor-guide.md)\n\n\ud83c\udfa5 [Video Hub](./internal-resources/video-hub.md)\n\n\ud83c\udfd7\ufe0f [Release Notes](./internal-resources/release-notes.md)\n\n---\n\n**Find a \ud83d\udc7e bug \ud83d\udc7e or have suggestions? [Let us know](https://pages.git.generalassemb.ly/modular-curriculum-all-courses/universal-resources-internal/module-feedback.html)!**\n"
  },
  {
    "input": "I need a lab on Modern JavaScript Syntax. Make sure it addresses: Use ES6+ features in JavaScript, Implement modern JavaScript patterns, Understand JavaScript best practices The content should be approximately 450 words with a text-to-code ratio of 0.88. Include 0 images and 0 diagrams. Design this for a comparative teaching approach with 6 demonstration points. The instructor will need 40 minutes to prepare. The content should be approximately 450 words with a text-to-code ratio of 0.88. Include 0 images and 0 diagrams.  Design this for a comparative teaching approach with 6 demonstration points. The instructor will need 40 minutes to prepare.  The content should follow a feature by feature cognitive load pattern with medium student autonomy and high interactivity.",
    "output": "<h1>\n  <span class=\"prefix\"></span>\n  <span class=\"headline\">Modern JavaScript Syntax Lab</span>\n</h1>\n\n## About\n\nOver the last decade, JavaScript has seen significant changes in its syntax to make it more user-friendly, responding to developers' needs. These updates have become standard in popular frameworks like React, Vue, and Angular. It\u2019s key to understand that these changes primarily enhance coding efficiency rather than add new functionality to the language.\n\nThis lab is your opportunity to dive into modern JavaScript syntax. Understanding this contemporary style is beneficial, but a solid grasp of traditional JavaScript is essential. It lays a strong foundation not only for JavaScript but also for learning other programming languages.\n\n## Content\n\n- [Setup](./setup/README.md)\n- [Exercise](./exercise/README.md)\n\n## Internal\n\n### Prerequisites\n\nNone\n\n### Time to complete\n\nEstimated time to complete core lab exercise: **60 min**\n\n### Solution code\n\n\ud83c\udfc1 [Solution Code](https://git.generalassemb.ly/modular-curriculum-all-courses/modern-javascript-syntax-lab-solution)\n\n### Course landing pages\n\n- [RDS - React Development Short Course](https://pages.git.generalassemb.ly/modular-curriculum-all-courses/modern-javascript-syntax-lab/canvas-landing-pages/rds.html)\n- [SEB - Software Engineering Bootcamp](https://pages.git.generalassemb.ly/modular-curriculum-all-courses/modern-javascript-syntax-lab/canvas-landing-pages/seb.html)\n- [Fallback](https://pages.git.generalassemb.ly/modular-curriculum-all-courses/modern-javascript-syntax-lab/canvas-landing-pages/fallback.html)\n\n### Resources\n\n\u270f\ufe0f [Instructor Guide](./internal-resources/instructor-guide.md)\n\n\ud83c\udfa5 [Video Hub](./internal-resources/video-hub.md)\n\n\ud83c\udfd7\ufe0f [Release Notes](./internal-resources/release-notes.md)\n\n---\n\n**Find a \ud83d\udc7e bug \ud83d\udc7e or have suggestions? [Let us know](https://pages.git.generalassemb.ly/modular-curriculum-all-courses/universal-resources-internal/module-feedback.html)!**\n"
  },
  {
    "input": "Create a lab about Lifting State in React that covers these objectives: Understand React state management, Implement state lifting between components, Create reusable React components The content should be approximately 350 words with a text-to-code ratio of 1.0. Include 2 images and 0 diagrams. Design this for a inductive teaching approach with 3 demonstration points. The instructor will need 45 minutes to prepare. The content should be approximately 350 words with a text-to-code ratio of 1.0. Include 2 images and 0 diagrams.  Design this for a inductive teaching approach with 3 demonstration points. The instructor will need 45 minutes to prepare.  The content should follow a gradual build cognitive load pattern with medium student autonomy and high interactivity.",
    "output": "<h1>\n  <span class=\"prefix\"></span>\n  <span class=\"headline\">Lifting State in React Lab</span>\n</h1>\n\n## About\n\nWelcome to Reactville, a constantly evolving virtual metropolis. Let's build this digital town together, one component at a time.\n\n![Reactville Skyline](./assets/reactville.png)\n\nToday, you're stepping into the Reactville Burger Shop, a favorite local eatery known for its mouth-watering burgers. In this interactive app, users build their dream burger, choosing from various breads, meats, and toppings. But there's a catch: it's also a lesson in 'lifting state' in React. Get ready to stack ingredients and elevate your React skills!\n\n![Solution UI](./assets/burger.png)\n\nIn this lab, students will create a burger builder app with two main components: an ingredients list and a burger stack. Users will be able to add items from the ingredients list to the burger stack to create the perfect burger.\n\n## Content\n\n- [Setup](./setup/README.md)\n- [Exercise](./exercise/README.md)\n- [Create a Reusable `Ingredient` Component](./create-a-reusable-ingredient-component/README.md)\n\n## Internal\n\n### Prerequisites\n\n- Lifting State in React\n\n### Time to complete\n\nEstimated time to complete core lab exercise: **180 mins**\n\n### Solution code\n\n\ud83c\udfc1 [Solution code](https://git.generalassemb.ly/modular-curriculum-all-courses/lifting-state-in-react-lab-solution)\n\n### Course landing pages\n\n- [RDS - React Development Short Course](https://pages.git.generalassemb.ly/modular-curriculum-all-courses/lifting-state-in-react-lab/canvas-landing-pages/rds.html)\n- [SEB - Software Engineering Bootcamp](https://pages.git.generalassemb.ly/modular-curriculum-all-courses/lifting-state-in-react-lab/canvas-landing-pages/seb.html)\n- [Fallback](https://pages.git.generalassemb.ly/modular-curriculum-all-courses/lifting-state-in-react-lab/canvas-landing-pages/fallback.html)\n\n### Resources\n\n\u270f\ufe0f [Instructor Guide](./internal-resources/instructor-guide.md)\n\n\ud83c\udfa5 [Video Hub](./internal-resources/video-hub.md)\n\n\ud83c\udfd7\ufe0f [Release Notes](./internal-resources/release-notes.md)\n\n---\n\n**Find a \ud83d\udc7e bug \ud83d\udc7e or have suggestions? [Let us know](https://pages.git.generalassemb.ly/modular-curriculum-all-courses/universal-resources-internal/module-feedback.html)!**\n"
  },
  {
    "input": "I need a lab on Lifting State in React. Make sure it addresses: Understand React state management, Implement state lifting between components, Create reusable React components The content should be approximately 350 words with a text-to-code ratio of 1.0. Include 2 images and 0 diagrams. Design this for a inductive teaching approach with 3 demonstration points. The instructor will need 45 minutes to prepare. The content should be approximately 350 words with a text-to-code ratio of 1.0. Include 2 images and 0 diagrams.  Design this for a inductive teaching approach with 3 demonstration points. The instructor will need 45 minutes to prepare.  The content should follow a gradual build cognitive load pattern with medium student autonomy and high interactivity.",
    "output": "<h1>\n  <span class=\"prefix\"></span>\n  <span class=\"headline\">Lifting State in React Lab</span>\n</h1>\n\n## About\n\nWelcome to Reactville, a constantly evolving virtual metropolis. Let's build this digital town together, one component at a time.\n\n![Reactville Skyline](./assets/reactville.png)\n\nToday, you're stepping into the Reactville Burger Shop, a favorite local eatery known for its mouth-watering burgers. In this interactive app, users build their dream burger, choosing from various breads, meats, and toppings. But there's a catch: it's also a lesson in 'lifting state' in React. Get ready to stack ingredients and elevate your React skills!\n\n![Solution UI](./assets/burger.png)\n\nIn this lab, students will create a burger builder app with two main components: an ingredients list and a burger stack. Users will be able to add items from the ingredients list to the burger stack to create the perfect burger.\n\n## Content\n\n- [Setup](./setup/README.md)\n- [Exercise](./exercise/README.md)\n- [Create a Reusable `Ingredient` Component](./create-a-reusable-ingredient-component/README.md)\n\n## Internal\n\n### Prerequisites\n\n- Lifting State in React\n\n### Time to complete\n\nEstimated time to complete core lab exercise: **180 mins**\n\n### Solution code\n\n\ud83c\udfc1 [Solution code](https://git.generalassemb.ly/modular-curriculum-all-courses/lifting-state-in-react-lab-solution)\n\n### Course landing pages\n\n- [RDS - React Development Short Course](https://pages.git.generalassemb.ly/modular-curriculum-all-courses/lifting-state-in-react-lab/canvas-landing-pages/rds.html)\n- [SEB - Software Engineering Bootcamp](https://pages.git.generalassemb.ly/modular-curriculum-all-courses/lifting-state-in-react-lab/canvas-landing-pages/seb.html)\n- [Fallback](https://pages.git.generalassemb.ly/modular-curriculum-all-courses/lifting-state-in-react-lab/canvas-landing-pages/fallback.html)\n\n### Resources\n\n\u270f\ufe0f [Instructor Guide](./internal-resources/instructor-guide.md)\n\n\ud83c\udfa5 [Video Hub](./internal-resources/video-hub.md)\n\n\ud83c\udfd7\ufe0f [Release Notes](./internal-resources/release-notes.md)\n\n---\n\n**Find a \ud83d\udc7e bug \ud83d\udc7e or have suggestions? [Let us know](https://pages.git.generalassemb.ly/modular-curriculum-all-courses/universal-resources-internal/module-feedback.html)!**\n"
  },
  {
    "input": "Create a lesson about AWS CloudFormation Provisioning Resources that covers these objectives: Understand the concept of infrastructure-as-code and the role of AWS CloudFormation, Gain familiarity with the AWS CloudFormation Designer, Learn how to create a CloudFormation stack and configure stack details, Understand the importance of key pairs for SSH access to EC2 instances The content should be approximately 750 words with a text-to-code ratio of 0.93. Include 9 images and 0 diagrams. Design this for a deductive teaching approach with 5 demonstration points. The instructor will need 60 minutes to prepare. The content should be approximately 750 words with a text-to-code ratio of 0.93. Include 9 images and 0 diagrams.  Design this for a deductive teaching approach with 5 demonstration points. The instructor will need 60 minutes to prepare.  The content should follow a concept heavy start cognitive load pattern with low student autonomy and medium interactivity.",
    "output": "# ![](https://ga-dash.s3.amazonaws.com/production/assets/logo-9f88ae6c9c3871690e33280fcf557f33.png) AWS CloudFormation Provisioning Resources\n\n| Title                                     | Type | Duration | \n|-------------------------------------------|------|----------|\n| AWS CloudFormation Provisioning Resources | Lab  | 1:00     |\n\n- [ AWS CloudFormation Provisioning Resources](#-aws-cloudformation-provisioning-resources)\n  - [Objectives](#objectives)\n  - [Instructions](#instructions)\n  - [Troubleshooting](#troubleshooting)\n\n## Objectives\n\n*After this lesson, students will be able to:*\n\n- Understand the concept of infrastructure-as-code and the role of AWS CloudFormation in provisioning and managing AWS\n  resources.\n- Gain familiarity with the AWS CloudFormation Designer and its visual representation of resources.\n- Learn how to create a CloudFormation stack and configure the stack details.\n- Understand the importance of key pairs for SSH access to EC2 instances and learn how to select an existing key pair or\n  create a new one.\n- Gain hands-on experience in launching an EC2 instance with a public IP using CloudFormation.\n- Understand the process of reviewing and validating stack information before initiating the stack creation.\n- Learn how to submit the CloudFormation stack creation and monitor the deployment process.\n- Gain proficiency in SSHing into the deployed EC2 instance using the assigned public IP address.\n\nIn this lab, you will gain hands-on experience using AWS CloudFormation to deploy a single virtual machine (EC2\ninstance) with a public IP address. Following the steps below, you will be able to provision infrastructure-as-code and\nlaunch an EC2 instance using CloudFormation.\n\n## Instructions\n\n- Visit the AWS CloudFormation guide to\n  see [sample templates](https://aws.amazon.com/cloudformation/templates/aws-cloudformation-templates-sa-east-1/)\n  for AWS CloudFormation.\n- Look for the EIP_With_Association.template (Associate an EC2 Instance with a pre-existing EIP.)  \n- You can begin the stack creation by returning to the previous browser tab and clicking on **Launch Stack** button.\n- In Step 1 of the stack creation wizard, leave all the fields at their default values and click **Next**.\n  ![img_03.png](images/img_03.png)\n- Provide a suitable name for the stack, such as **Lab02**, or any other preferred name. Select the appropriate Key\n  Pair from the list. Note: If no key pairs are available, you will need to either create a\n  new key pair manually or modify the template to include the creation of a key pair.\n  ![img_04.png](images/img_04.png)\n- Click **Next** to proceed to Step 3.\n- In Step 3, leave all the options at their default values and click **Next**.\n- Review the stack information on the **Review** page to ensure all the details are correct.\n- Click **Submit** to initiate the CloudFormation stack creation.\n- Monitor the stack creation process until it is completed.\n  ![img_05.png](images/img_05.png)\n- Once the stack creation is successful, retrieve the assigned public IP address of the EC2 instance.\n  ![img_06.png](images/img_06.png)\n  ![img_07.png](images/img_07.png)\n- Use an SSH client to connect to the EC2 instance using the public IP address, following the appropriate SSH command\n  syntax for your operating system.\n  ![img_08.png](images/img_08.png)\n\n![img_09.png](images/img_09.png)\n\nCongratulations! You have successfully deployed an EC2 instance with a public IP address using AWS CloudFormation.\n\n## Troubleshooting\n\nHow to fix the unprotected private key file error?\n\nThe **unprotected private key file** error typically occurs when the permissions on your private key file are too\npermissive, making it accessible to other users or processes on your system. To fix this error, you need to restrict the\npermissions on your private key file. Here's how you can do it:\n\n1. Locate your private key file. It is usually a file with a `.pem` extension.\n2. Open a terminal or command prompt.\n3. Change the permissions of the private key file to make it readable only by the owner. Run the following command:\n\n  ```text\n  chmod 400 /path/to/private_key.pem\n  ```\n\n4. Replace `/path/to/private_key.pem` with the actual path to your private key file.\n5. Verify the permissions by running the following command:\n\n```text\nls -l /path/to/private_key.pem\n```\n\nMake sure the permissions are set to `-r-------- or -rw-------`, indicating that only the owner has read access.\n\n6. Try using the private key file again to connect to your server or perform the desired operation. The **unprotected\n   private key file** error should no longer occur.\n\nBy restricting the permissions on your private key file, you ensure that it is only accessible to you, enhancing the\nsecurity of your SSH connections.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "input": "I need a lesson on AWS CloudFormation Provisioning Resources. Make sure it addresses: Understand the concept of infrastructure-as-code and the role of AWS CloudFormation, Gain familiarity with the AWS CloudFormation Designer, Learn how to create a CloudFormation stack and configure stack details, Understand the importance of key pairs for SSH access to EC2 instances The content should be approximately 750 words with a text-to-code ratio of 0.93. Include 9 images and 0 diagrams. Design this for a deductive teaching approach with 5 demonstration points. The instructor will need 60 minutes to prepare. The content should be approximately 750 words with a text-to-code ratio of 0.93. Include 9 images and 0 diagrams.  Design this for a deductive teaching approach with 5 demonstration points. The instructor will need 60 minutes to prepare.  The content should follow a concept heavy start cognitive load pattern with low student autonomy and medium interactivity.",
    "output": "# ![](https://ga-dash.s3.amazonaws.com/production/assets/logo-9f88ae6c9c3871690e33280fcf557f33.png) AWS CloudFormation Provisioning Resources\n\n| Title                                     | Type | Duration | \n|-------------------------------------------|------|----------|\n| AWS CloudFormation Provisioning Resources | Lab  | 1:00     |\n\n- [ AWS CloudFormation Provisioning Resources](#-aws-cloudformation-provisioning-resources)\n  - [Objectives](#objectives)\n  - [Instructions](#instructions)\n  - [Troubleshooting](#troubleshooting)\n\n## Objectives\n\n*After this lesson, students will be able to:*\n\n- Understand the concept of infrastructure-as-code and the role of AWS CloudFormation in provisioning and managing AWS\n  resources.\n- Gain familiarity with the AWS CloudFormation Designer and its visual representation of resources.\n- Learn how to create a CloudFormation stack and configure the stack details.\n- Understand the importance of key pairs for SSH access to EC2 instances and learn how to select an existing key pair or\n  create a new one.\n- Gain hands-on experience in launching an EC2 instance with a public IP using CloudFormation.\n- Understand the process of reviewing and validating stack information before initiating the stack creation.\n- Learn how to submit the CloudFormation stack creation and monitor the deployment process.\n- Gain proficiency in SSHing into the deployed EC2 instance using the assigned public IP address.\n\nIn this lab, you will gain hands-on experience using AWS CloudFormation to deploy a single virtual machine (EC2\ninstance) with a public IP address. Following the steps below, you will be able to provision infrastructure-as-code and\nlaunch an EC2 instance using CloudFormation.\n\n## Instructions\n\n- Visit the AWS CloudFormation guide to\n  see [sample templates](https://aws.amazon.com/cloudformation/templates/aws-cloudformation-templates-sa-east-1/)\n  for AWS CloudFormation.\n- Look for the EIP_With_Association.template (Associate an EC2 Instance with a pre-existing EIP.)  \n- You can begin the stack creation by returning to the previous browser tab and clicking on **Launch Stack** button.\n- In Step 1 of the stack creation wizard, leave all the fields at their default values and click **Next**.\n  ![img_03.png](images/img_03.png)\n- Provide a suitable name for the stack, such as **Lab02**, or any other preferred name. Select the appropriate Key\n  Pair from the list. Note: If no key pairs are available, you will need to either create a\n  new key pair manually or modify the template to include the creation of a key pair.\n  ![img_04.png](images/img_04.png)\n- Click **Next** to proceed to Step 3.\n- In Step 3, leave all the options at their default values and click **Next**.\n- Review the stack information on the **Review** page to ensure all the details are correct.\n- Click **Submit** to initiate the CloudFormation stack creation.\n- Monitor the stack creation process until it is completed.\n  ![img_05.png](images/img_05.png)\n- Once the stack creation is successful, retrieve the assigned public IP address of the EC2 instance.\n  ![img_06.png](images/img_06.png)\n  ![img_07.png](images/img_07.png)\n- Use an SSH client to connect to the EC2 instance using the public IP address, following the appropriate SSH command\n  syntax for your operating system.\n  ![img_08.png](images/img_08.png)\n\n![img_09.png](images/img_09.png)\n\nCongratulations! You have successfully deployed an EC2 instance with a public IP address using AWS CloudFormation.\n\n## Troubleshooting\n\nHow to fix the unprotected private key file error?\n\nThe **unprotected private key file** error typically occurs when the permissions on your private key file are too\npermissive, making it accessible to other users or processes on your system. To fix this error, you need to restrict the\npermissions on your private key file. Here's how you can do it:\n\n1. Locate your private key file. It is usually a file with a `.pem` extension.\n2. Open a terminal or command prompt.\n3. Change the permissions of the private key file to make it readable only by the owner. Run the following command:\n\n  ```text\n  chmod 400 /path/to/private_key.pem\n  ```\n\n4. Replace `/path/to/private_key.pem` with the actual path to your private key file.\n5. Verify the permissions by running the following command:\n\n```text\nls -l /path/to/private_key.pem\n```\n\nMake sure the permissions are set to `-r-------- or -rw-------`, indicating that only the owner has read access.\n\n6. Try using the private key file again to connect to your server or perform the desired operation. The **unprotected\n   private key file** error should no longer occur.\n\nBy restricting the permissions on your private key file, you ensure that it is only accessible to you, enhancing the\nsecurity of your SSH connections.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "input": "Create a lesson about Full Stack React Application Development that covers these objectives: Build a full-stack application with React frontend and Express backend, Implement CRUD operations across the stack, Connect React components to API endpoints The content should be approximately 600 words with a text-to-code ratio of 0.83. Include 2 images and 1 diagrams. Design this for a code-along teaching approach with 8 demonstration points. The instructor will need 75 minutes to prepare. The content should be approximately 600 words with a text-to-code ratio of 0.83. Include 2 images and 1 diagrams.  Design this for a code-along teaching approach with 8 demonstration points. The instructor will need 75 minutes to prepare.  The content should follow a layered complexity cognitive load pattern with low student autonomy and high interactivity.",
    "output": "# Connect React frontend to Express API backend\n\n## Start up your Node Express Backend\n\n1. Open your terminal.\n2. To access the `mef` directory, please navigate to it from your home directory using the command `cd ~/mef`.\n3. Fork the repository named [full-stack-react](https://git.generalassemb.ly/ModernEngineering/full-stack-react) on the\n   GitHub website.\n4. Click the \"Fork\" button in the upper right corner of the repository page. This will create a copy of the repository\n   under your own GitHub account.\n5. After forking, you'll have your own copy of the repository under your GitHub account.\n    - Copy the URL of your forked repository, which will look\n      like: `https://github.com/YourUsername/full-stack-react.git`.\n6. Now clone the repository using the SSH URL.\n7. To change your current working directory to `express-todo-api` within the cloned `full-stack-react` repository, you\n   can use the following commands: `cd full-stack-react/express-todo-api/`.\n8. To reset the existing database using the `psql` command, you can use the following\n   command: `psql -U postgres -d todo_app_db < db/todo.sql`.\n9. To add dependencies to our project, use the `npm install` command followed by the package names you want to install.\n   In our case, `npm i cors express pg nodemon`.\n10. To open the express-todo-api project in VSCode, use the command `code .`. After opening the project, you can initiate the server by opening the VS Code terminal and executing the command `npm run start`. The server is set up to listen on port `3001`.\n\nNOTE: If you get a message that a port is in use, you can kill it with this\ncommand: `sudo kill -9 $(sudo lsof -t -i:3000)`.\n\n- Replace `3000` with the port number you want to stop.\n- [Reference](https://tecadmin.net/kill-process-on-specific-port/)\n\n## Postman Review\n\nLet's open the Postman Collection that is provided (or that you built in class) to review the 5 API Todo endpoints.\n\n1. Open Postman: Run `/opt/Postman/app/Postman` in the terminal\n2. The collection should already be available in Postman. If it's not, you can select \"Import\" then locate the\n   `todo_app.postman_collection.json` file in the `express-to-do-api` folder.\n\nOnce we've reviewed and confirmed that the backend is functioning correctly, we can shift our attention to the React\nfrontend.\n\n## Setting up React Frontend Application\n\nTo begin running the React frontend application, please open a new terminal window and navigate to the full-stack-react\nfolder, which you cloned earlier.\n\n1. `cd ~/mef/full-stack-react/react-to-do-frontend-starter/`.\n2. Now, open the terminal window within VSCode and execute the following commands:\n    - Run `npm i` to install the necessary Node.js dependencies.\n    - After the dependencies are installed, start the React frontend application with: `npm run start`.\n3. This will launch the development server for your React frontend application and should open it in your default web\n   browser.\n\n## Get all Todos\n\n#### GET TODOS - `http://127.0.0.1:3001/api/todos`\n\n1. We'll need to make a `fetch` request to hit our backend endpoint to get all the todos.\n\n   `MyList.js` - (this should be in the starter code)\n\n   ```js\n   import ListItem from \"./ListItem\";\n   import { useState, useEffect } from \"react\";\n\n   function MyList() {\n     const [toDoItemArray, setToDoItemArray] = useState([]);\n     const [newItem, setNewItem] = useState(\"\");\n\n     const todoItems = toDoItemArray.map((item) => (\n       <ListItem {...item} key={item.id} />\n     ));\n\n     // We declare a named function called getTodos()\n     // because an fetch and .json are asynchronous.\n     // You can put all of this inside useEffect if you want\n     async function getTodos() {\n       const response = await fetch(\"http://127.0.0.1:3001/api/todos\");\n       const todos = await response.json();\n       console.log(\"Todos from database\", todos);\n\n       setToDoItemArray(todos);\n     }\n\n     // Inside the [], tell useEffect to update\n     // only when a particular value changes\n     // React will do an infinite update if you do not\n     // supply an empty dependencies array\n     useEffect(() => {\n       getTodos();\n     }, []);\n\n     return (\n       <div>\n         <h1>Things I should stop procrastinating:</h1>\n         <ul>{todoItems}</ul>\n         {newItem}\n         <form>\n           <input\n             type=\"text\"\n             placeholder=\"Type an item here\"\n             onChange={(e) => setNewItem(e.target.value)}\n             value={newItem}\n           />\n           <button\n             onClick={(e) => {\n               e.preventDefault();\n               setToDoItemArray([...toDoItemArray, newItem]);\n               setNewItem(\"\");\n             }}\n           >\n             Add it!\n           </button>\n         </form>\n         <button\n           onClick={() => {\n             console.log(\"Clearing list!\");\n             setToDoItemArray([]);\n           }}\n         >\n           Finished the list!\n         </button>\n       </div>\n     );\n   }\n\n   export default MyList;\n   ```\n\n1. `ListItem.js` (this should be in the starter code)\n\n   ```js\n   const ListItem = ({ title, done, id }) => {\n     return (\n       <>\n         <li>\n           {title}\n           <input type=\"checkbox\" defaultChecked={done} />\n         </li>\n       </>\n     );\n   };\n   export default ListItem;\n   ```\n\n- Import `useEffect`\n- Make an API call to the Express Backend\n- Update our `ListItem` component\n\n<br>\n\n## Create a Todo\n\n#### POST TODOS - `http://127.0.0.1:3001/api/todos`\n\n1. First, in `MyList.js`, we'll create an `async` function named `createTodo`. We will move some of the code from the\n   button element to this function.\n\n   `MyList.js`\n\n   ```jsx\n   async function createTodo(e) {\n     e.preventDefault();\n\n     let newItemForDatabase = {\n       title: newItem,\n       done: false,\n     };\n\n     const options = {\n       method: \"POST\",\n       headers: {\n         Accept: \"application/json\",\n         \"Content-Type\": \"application/json\",\n       },\n       body: JSON.stringify(newItemForDatabase),\n     };\n     try {\n       const response = await fetch(`http://127.0.0.1:3001/api/todos`, options);\n       const data = await response.json();\n       console.log(\"newTodo With ID\", data);\n       setToDoItemArray([...toDoItemArray, data]);\n       setNewItem(\"\");\n     } catch (error) {\n       console.log(error);\n     }\n   }\n   ```\n\n1. Next, in `MyList`, we'll update the button in our `return` method to call the function.\n\n   `MyList.js`\n\n   ```jsx\n       // Replace the logic in this button...\n\n           <button\n             onClick={(e) => {\n               e.preventDefault();\n               setToDoItemArray([...toDoItemArray, newItem]);\n               setNewItem(\"\");\n             }}\n           >\n             Add it!\n           </button>\n\n       // With this version of the button\n\n           <button onClick={createTodo}>\n               Add it!\n           </button>\n   ```\n\n1. In `ListItem`, we'll pass in the `done` and `id` as props.\n\n   ```jsx\n   const ListItem = ({ title, done, id }) => {\n     return (\n       <>\n         <li>\n           {title}\n           <input type=\"checkbox\" defaultChecked={done} />\n         </li>\n       </>\n     );\n   };\n   export default ListItem;\n   ```\n\n1. For reference, our Express backend `index.js` POST route should look like this:\n\n   ```js\n   app.post(\"/api/todos\", (request, response) => {\n     const { title, done } = request.body;\n     console.log(\"request.body\", request.body);\n\n     pool.query(\n       \"INSERT INTO todos (title, done) VALUES ($1, $2) RETURNING *\",\n       [title, done],\n       (error, results) => {\n         if (error) throw error;\n         console.log(results);\n         response.status(201).json(results.rows[0]);\n       }\n     );\n   });\n   ```\n\n<br>\n\n## DELETE Todo\n\n#### DELETE a Todo - DELETE `http://127.0.0.1:3001/api/todos/:id`\n\n1. In `MyList.js`, update the `todoItems` array to pass a `handleDeleteTodo` prop to the `ListItem` component containing\n   a `deleteTodo` event handler.\n\n   ```js\n   const todoItems = toDoItemArray.map((item, index) => (\n     <ListItem {...item} key={index} handleDeleteTodo={deleteTodo} />\n   ));\n   ```\n\n1. Next, we'll create the `deleteTodo` event handler.\n\n   ```js\n   async function deleteTodo(e, id) {\n     e.preventDefault();\n\n     const options = {\n       method: \"DELETE\",\n       headers: {\n         Accept: \"application/json\",\n         \"Content-Type\": \"application/json\",\n       },\n     };\n     try {\n       const response = await fetch(\n         `http://127.0.0.1:3001/api/todos/${id}`,\n         options\n       );\n       let newToDoItemArray = [...toDoItemArray];\n       let itemToDelete = newToDoItemArray.findIndex((item) => item.id === id);\n       newToDoItemArray.splice(itemToDelete, 1);\n       setToDoItemArray(newToDoItemArray);\n     } catch (error) {\n       console.log(error);\n     }\n   }\n   ```\n\n1. `ListItem.js`\n\n   ```js\n   const ListItem = ({ title, done, id, handleDeleteTodo }) => {\n     return (\n       <>\n         <li>\n           {title}\n           <input type=\"checkbox\" defaultChecked={done} />\n           <button onClick={(e) => handleDeleteTodo(e, id)}>X</button>\n         </li>\n       </>\n     );\n   };\n\n   export default ListItem;\n   ```\n\n<br>\n\n## Update Todo as DONE\n\n[Replacing Items in An Array](https://react.dev/learn/updating-arrays-in-state#replacing-items-in-an-array)\n\n#### Update a Todo - PUT `http://127.0.0.1:3001/api/todos/:id`\n\n1. `MyList.js` - add a `handleUpdateTodo` prop to the `ListItem` component.\n\n   ```js\n   const todoItems = toDoItemArray.map((item) => (\n     <ListItem\n       {...item}\n       key={item.id}\n       handleDeleteTodo={deleteTodo}\n       handleUpdateTodo={updateTodo}\n     />\n   ));\n   ```\n\n1. `MyList.js` - build an `updateTodo` event handler.\n\n   ```js\n   async function updateTodo(e, id) {\n     e.preventDefault();\n\n     let indexOfItem = toDoItemArray.findIndex((item) => item.id === id);\n     let itemToUpdate = { ...toDoItemArray[indexOfItem] };\n     itemToUpdate.done = !itemToUpdate.done;\n\n     const options = {\n       method: \"PUT\",\n       headers: {\n         Accept: \"application/json\",\n         \"Content-Type\": \"application/json\",\n       },\n       body: JSON.stringify(itemToUpdate),\n     };\n     try {\n       const response = await fetch(\n         `http://127.0.0.1:3001/api/todos/${id}`,\n         options\n       );\n       const newToDoItemArray = [...toDoItemArray];\n       newToDoItemArray[indexOfItem] = itemToUpdate;\n       setToDoItemArray(newToDoItemArray);\n     } catch (error) {\n       console.log(error);\n     }\n   }\n   ```\n\n1. `ListItem.js`\n\n   ```js\n   const ListItem = ({\n     title,\n     done,\n     id,\n     handleDeleteTodo,\n     handleUpdateTodo,\n   }) => {\n     return (\n       <>\n         <li>\n           {title}\n           <input\n             type=\"checkbox\"\n             //   defaultChecked={done}\n             checked={done ? \"checked\" : \"\"}\n             onChange={(e) => handleUpdateTodo(e, id)}\n           />\n           <button onClick={(e) => handleDeleteTodo(e, id)}>X</button>\n         </li>\n       </>\n     );\n   };\n\n   export default ListItem;\n   ```\n\n1. For reference, this is what our Express backend PUT route should be in `index.js`.\n\n   ```js\n   app.put(\"/api/todos/:id\", (request, response) => {\n     const id = parseInt(request.params.id);\n     const { title, done } = request.body;\n\n     pool.query(\n       \"UPDATE todos SET title = $1, done = $2 WHERE id = $3\",\n       [title, done, id],\n       (error, results) => {\n         if (error) throw error;\n         response.status(200).json({ message: `Todo modified with ID: ${id}` });\n       }\n     );\n   });\n   ```\n\n<br>\n\n## Bonuses - YOU DO\n\n- Filter Todos into 2 sections: complete and todo\n- Implement the Finished the List! button to clear out all Todos\n- Add the ability to update the title of a todo (you could add logic to make the `title` input field clickable in the\n  UI)\n- Use React Router to show the details for a single todo\n"
  },
  {
    "input": "I need a lesson on Full Stack React Application Development. Make sure it addresses: Build a full-stack application with React frontend and Express backend, Implement CRUD operations across the stack, Connect React components to API endpoints The content should be approximately 600 words with a text-to-code ratio of 0.83. Include 2 images and 1 diagrams. Design this for a code-along teaching approach with 8 demonstration points. The instructor will need 75 minutes to prepare. The content should be approximately 600 words with a text-to-code ratio of 0.83. Include 2 images and 1 diagrams.  Design this for a code-along teaching approach with 8 demonstration points. The instructor will need 75 minutes to prepare.  The content should follow a layered complexity cognitive load pattern with low student autonomy and high interactivity.",
    "output": "# Connect React frontend to Express API backend\n\n## Start up your Node Express Backend\n\n1. Open your terminal.\n2. To access the `mef` directory, please navigate to it from your home directory using the command `cd ~/mef`.\n3. Fork the repository named [full-stack-react](https://git.generalassemb.ly/ModernEngineering/full-stack-react) on the\n   GitHub website.\n4. Click the \"Fork\" button in the upper right corner of the repository page. This will create a copy of the repository\n   under your own GitHub account.\n5. After forking, you'll have your own copy of the repository under your GitHub account.\n    - Copy the URL of your forked repository, which will look\n      like: `https://github.com/YourUsername/full-stack-react.git`.\n6. Now clone the repository using the SSH URL.\n7. To change your current working directory to `express-todo-api` within the cloned `full-stack-react` repository, you\n   can use the following commands: `cd full-stack-react/express-todo-api/`.\n8. To reset the existing database using the `psql` command, you can use the following\n   command: `psql -U postgres -d todo_app_db < db/todo.sql`.\n9. To add dependencies to our project, use the `npm install` command followed by the package names you want to install.\n   In our case, `npm i cors express pg nodemon`.\n10. To open the express-todo-api project in VSCode, use the command `code .`. After opening the project, you can initiate the server by opening the VS Code terminal and executing the command `npm run start`. The server is set up to listen on port `3001`.\n\nNOTE: If you get a message that a port is in use, you can kill it with this\ncommand: `sudo kill -9 $(sudo lsof -t -i:3000)`.\n\n- Replace `3000` with the port number you want to stop.\n- [Reference](https://tecadmin.net/kill-process-on-specific-port/)\n\n## Postman Review\n\nLet's open the Postman Collection that is provided (or that you built in class) to review the 5 API Todo endpoints.\n\n1. Open Postman: Run `/opt/Postman/app/Postman` in the terminal\n2. The collection should already be available in Postman. If it's not, you can select \"Import\" then locate the\n   `todo_app.postman_collection.json` file in the `express-to-do-api` folder.\n\nOnce we've reviewed and confirmed that the backend is functioning correctly, we can shift our attention to the React\nfrontend.\n\n## Setting up React Frontend Application\n\nTo begin running the React frontend application, please open a new terminal window and navigate to the full-stack-react\nfolder, which you cloned earlier.\n\n1. `cd ~/mef/full-stack-react/react-to-do-frontend-starter/`.\n2. Now, open the terminal window within VSCode and execute the following commands:\n    - Run `npm i` to install the necessary Node.js dependencies.\n    - After the dependencies are installed, start the React frontend application with: `npm run start`.\n3. This will launch the development server for your React frontend application and should open it in your default web\n   browser.\n\n## Get all Todos\n\n#### GET TODOS - `http://127.0.0.1:3001/api/todos`\n\n1. We'll need to make a `fetch` request to hit our backend endpoint to get all the todos.\n\n   `MyList.js` - (this should be in the starter code)\n\n   ```js\n   import ListItem from \"./ListItem\";\n   import { useState, useEffect } from \"react\";\n\n   function MyList() {\n     const [toDoItemArray, setToDoItemArray] = useState([]);\n     const [newItem, setNewItem] = useState(\"\");\n\n     const todoItems = toDoItemArray.map((item) => (\n       <ListItem {...item} key={item.id} />\n     ));\n\n     // We declare a named function called getTodos()\n     // because an fetch and .json are asynchronous.\n     // You can put all of this inside useEffect if you want\n     async function getTodos() {\n       const response = await fetch(\"http://127.0.0.1:3001/api/todos\");\n       const todos = await response.json();\n       console.log(\"Todos from database\", todos);\n\n       setToDoItemArray(todos);\n     }\n\n     // Inside the [], tell useEffect to update\n     // only when a particular value changes\n     // React will do an infinite update if you do not\n     // supply an empty dependencies array\n     useEffect(() => {\n       getTodos();\n     }, []);\n\n     return (\n       <div>\n         <h1>Things I should stop procrastinating:</h1>\n         <ul>{todoItems}</ul>\n         {newItem}\n         <form>\n           <input\n             type=\"text\"\n             placeholder=\"Type an item here\"\n             onChange={(e) => setNewItem(e.target.value)}\n             value={newItem}\n           />\n           <button\n             onClick={(e) => {\n               e.preventDefault();\n               setToDoItemArray([...toDoItemArray, newItem]);\n               setNewItem(\"\");\n             }}\n           >\n             Add it!\n           </button>\n         </form>\n         <button\n           onClick={() => {\n             console.log(\"Clearing list!\");\n             setToDoItemArray([]);\n           }}\n         >\n           Finished the list!\n         </button>\n       </div>\n     );\n   }\n\n   export default MyList;\n   ```\n\n1. `ListItem.js` (this should be in the starter code)\n\n   ```js\n   const ListItem = ({ title, done, id }) => {\n     return (\n       <>\n         <li>\n           {title}\n           <input type=\"checkbox\" defaultChecked={done} />\n         </li>\n       </>\n     );\n   };\n   export default ListItem;\n   ```\n\n- Import `useEffect`\n- Make an API call to the Express Backend\n- Update our `ListItem` component\n\n<br>\n\n## Create a Todo\n\n#### POST TODOS - `http://127.0.0.1:3001/api/todos`\n\n1. First, in `MyList.js`, we'll create an `async` function named `createTodo`. We will move some of the code from the\n   button element to this function.\n\n   `MyList.js`\n\n   ```jsx\n   async function createTodo(e) {\n     e.preventDefault();\n\n     let newItemForDatabase = {\n       title: newItem,\n       done: false,\n     };\n\n     const options = {\n       method: \"POST\",\n       headers: {\n         Accept: \"application/json\",\n         \"Content-Type\": \"application/json\",\n       },\n       body: JSON.stringify(newItemForDatabase),\n     };\n     try {\n       const response = await fetch(`http://127.0.0.1:3001/api/todos`, options);\n       const data = await response.json();\n       console.log(\"newTodo With ID\", data);\n       setToDoItemArray([...toDoItemArray, data]);\n       setNewItem(\"\");\n     } catch (error) {\n       console.log(error);\n     }\n   }\n   ```\n\n1. Next, in `MyList`, we'll update the button in our `return` method to call the function.\n\n   `MyList.js`\n\n   ```jsx\n       // Replace the logic in this button...\n\n           <button\n             onClick={(e) => {\n               e.preventDefault();\n               setToDoItemArray([...toDoItemArray, newItem]);\n               setNewItem(\"\");\n             }}\n           >\n             Add it!\n           </button>\n\n       // With this version of the button\n\n           <button onClick={createTodo}>\n               Add it!\n           </button>\n   ```\n\n1. In `ListItem`, we'll pass in the `done` and `id` as props.\n\n   ```jsx\n   const ListItem = ({ title, done, id }) => {\n     return (\n       <>\n         <li>\n           {title}\n           <input type=\"checkbox\" defaultChecked={done} />\n         </li>\n       </>\n     );\n   };\n   export default ListItem;\n   ```\n\n1. For reference, our Express backend `index.js` POST route should look like this:\n\n   ```js\n   app.post(\"/api/todos\", (request, response) => {\n     const { title, done } = request.body;\n     console.log(\"request.body\", request.body);\n\n     pool.query(\n       \"INSERT INTO todos (title, done) VALUES ($1, $2) RETURNING *\",\n       [title, done],\n       (error, results) => {\n         if (error) throw error;\n         console.log(results);\n         response.status(201).json(results.rows[0]);\n       }\n     );\n   });\n   ```\n\n<br>\n\n## DELETE Todo\n\n#### DELETE a Todo - DELETE `http://127.0.0.1:3001/api/todos/:id`\n\n1. In `MyList.js`, update the `todoItems` array to pass a `handleDeleteTodo` prop to the `ListItem` component containing\n   a `deleteTodo` event handler.\n\n   ```js\n   const todoItems = toDoItemArray.map((item, index) => (\n     <ListItem {...item} key={index} handleDeleteTodo={deleteTodo} />\n   ));\n   ```\n\n1. Next, we'll create the `deleteTodo` event handler.\n\n   ```js\n   async function deleteTodo(e, id) {\n     e.preventDefault();\n\n     const options = {\n       method: \"DELETE\",\n       headers: {\n         Accept: \"application/json\",\n         \"Content-Type\": \"application/json\",\n       },\n     };\n     try {\n       const response = await fetch(\n         `http://127.0.0.1:3001/api/todos/${id}`,\n         options\n       );\n       let newToDoItemArray = [...toDoItemArray];\n       let itemToDelete = newToDoItemArray.findIndex((item) => item.id === id);\n       newToDoItemArray.splice(itemToDelete, 1);\n       setToDoItemArray(newToDoItemArray);\n     } catch (error) {\n       console.log(error);\n     }\n   }\n   ```\n\n1. `ListItem.js`\n\n   ```js\n   const ListItem = ({ title, done, id, handleDeleteTodo }) => {\n     return (\n       <>\n         <li>\n           {title}\n           <input type=\"checkbox\" defaultChecked={done} />\n           <button onClick={(e) => handleDeleteTodo(e, id)}>X</button>\n         </li>\n       </>\n     );\n   };\n\n   export default ListItem;\n   ```\n\n<br>\n\n## Update Todo as DONE\n\n[Replacing Items in An Array](https://react.dev/learn/updating-arrays-in-state#replacing-items-in-an-array)\n\n#### Update a Todo - PUT `http://127.0.0.1:3001/api/todos/:id`\n\n1. `MyList.js` - add a `handleUpdateTodo` prop to the `ListItem` component.\n\n   ```js\n   const todoItems = toDoItemArray.map((item) => (\n     <ListItem\n       {...item}\n       key={item.id}\n       handleDeleteTodo={deleteTodo}\n       handleUpdateTodo={updateTodo}\n     />\n   ));\n   ```\n\n1. `MyList.js` - build an `updateTodo` event handler.\n\n   ```js\n   async function updateTodo(e, id) {\n     e.preventDefault();\n\n     let indexOfItem = toDoItemArray.findIndex((item) => item.id === id);\n     let itemToUpdate = { ...toDoItemArray[indexOfItem] };\n     itemToUpdate.done = !itemToUpdate.done;\n\n     const options = {\n       method: \"PUT\",\n       headers: {\n         Accept: \"application/json\",\n         \"Content-Type\": \"application/json\",\n       },\n       body: JSON.stringify(itemToUpdate),\n     };\n     try {\n       const response = await fetch(\n         `http://127.0.0.1:3001/api/todos/${id}`,\n         options\n       );\n       const newToDoItemArray = [...toDoItemArray];\n       newToDoItemArray[indexOfItem] = itemToUpdate;\n       setToDoItemArray(newToDoItemArray);\n     } catch (error) {\n       console.log(error);\n     }\n   }\n   ```\n\n1. `ListItem.js`\n\n   ```js\n   const ListItem = ({\n     title,\n     done,\n     id,\n     handleDeleteTodo,\n     handleUpdateTodo,\n   }) => {\n     return (\n       <>\n         <li>\n           {title}\n           <input\n             type=\"checkbox\"\n             //   defaultChecked={done}\n             checked={done ? \"checked\" : \"\"}\n             onChange={(e) => handleUpdateTodo(e, id)}\n           />\n           <button onClick={(e) => handleDeleteTodo(e, id)}>X</button>\n         </li>\n       </>\n     );\n   };\n\n   export default ListItem;\n   ```\n\n1. For reference, this is what our Express backend PUT route should be in `index.js`.\n\n   ```js\n   app.put(\"/api/todos/:id\", (request, response) => {\n     const id = parseInt(request.params.id);\n     const { title, done } = request.body;\n\n     pool.query(\n       \"UPDATE todos SET title = $1, done = $2 WHERE id = $3\",\n       [title, done, id],\n       (error, results) => {\n         if (error) throw error;\n         response.status(200).json({ message: `Todo modified with ID: ${id}` });\n       }\n     );\n   });\n   ```\n\n<br>\n\n## Bonuses - YOU DO\n\n- Filter Todos into 2 sections: complete and todo\n- Implement the Finished the List! button to clear out all Todos\n- Add the ability to update the title of a todo (you could add logic to make the `title` input field clickable in the\n  UI)\n- Use React Router to show the details for a single todo\n"
  },
  {
    "input": "Create a lesson about Deploying Applications to Google Cloud Platform that covers these objectives: Build Express and React applications, Add Jest testing to applications, Deploy applications to Google Cloud Platform, Implement CI/CD with GitHub Actions The content should be approximately 700 words with a text-to-code ratio of 0.88. Include 5 images and 1 diagrams. Design this for a platform-guided teaching approach with 7 demonstration points. The instructor will need 90 minutes to prepare. The content should be approximately 700 words with a text-to-code ratio of 0.88. Include 5 images and 1 diagrams.  Design this for a platform-guided teaching approach with 7 demonstration points. The instructor will need 90 minutes to prepare.  The content should follow a platform focused cognitive load pattern with low student autonomy and medium interactivity.",
    "output": "# IKEA Express API / React / GitHub Actions / Google Cloud Deploy\n\n\n### In this repo\n- [Google Cloud Overview](./gcp-walkthrough.md)\n- [Build Node/Express App](./build-express-app.md)\n- [Testing With Postman](./testing-with-postman.md)\n- [Build React App](./build-react-app.md)\n- [Deploy to GCP](./deploy-to-gcp.md)\n- [Deploy to GCP with Github Actions](./deploy-to-gcp-github-actions.md)\n\n## Other repos\n- [IKEA Users App Complete](https://git.generalassemb.ly/marcwright-rem/ikea-users-app)\n- [GCP Deployed App](https://ikea-users-app-alem6gcnna-uc.a.run.app/)\n- [Public GitHub IKEA Users App](https://github.com/marcwright/ikea-users-app)\n\n<!-- # INSTRUCTIONS TO CREATE NODE\n\n## CREATE REACT VITE APP\n\n1. `mkdir pirate-app-08012024`\n1. `npm create vite@latest`\n2. Project Name: `react-app`\n3. React - Javascript\n4. Run these\n\n\t```\n\tcd pirate-app-08012024\n\tnpm install\n\tnpm run dev\n\t```\n\n5. `code .`\n6. make a change to `src/App.tsx` and app will rebuild\n7. `cd react-app` and `npm run build` will create a dist directory to deploy\n\n<br>\n\n## CREATE EXPRESS APP server side\n\n- send static html/js/css to browser\n- Create api for react app to call for data\n\n1. Go up one directory\n2. `npm init -y`\n3. `npm install express nodemon cors`\n3. `touch index.js`\n4. Add code to `index.js`\n\n ```js\n const express = require('express');\n const cors = require('cors');\n const app = express();\n app.use(cors());\n app.use(express.json());\n app.use(express.static(\"react-app/dist\"));\n \n \n app.get(\"/api/pirates/:id\", (req, res) => {\n     const id = req.params.id;\n     const pirate = getPirate(id);\n     if (!pirate) {\n       res.status(404).send(`Pirate ${id} not found`);\n     } else {\n       res.send({ data: pirate });\n     }\n   });\n function getPirate(id) {\n     const pirates = [\n       { id: 1, name: \"Blackbeard\", active: true, country: \"England\" },\n       { id: 2, name: \"Anne Bonny\", active: true, country: \"Ireland\" },\n       { id: 3, name: \"Calico Jack\", active: false, country: \"England\" },\n       { id: 4, name: \"Bartholomew Roberts\", active: true, country: \"Wales\" },\n       { id: 5, name: \"Mary Read\", active: false, country: \"England\" },\n     ];\n     return pirates.find((pirate) => pirate.id == id);\n   }\n \n const port = process.env.PORT || 8080;\n app.listen(port, async () => {\n   console.log(`Server started at ${port}`);\n }); \n ```\n\n5. Add a `start` command to `package.json`\n\n ```js\n   \"scripts\": {\n     \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n     \"start\": \"nodemon index.js\" \n   }, \n ```\n\n1. The server should start on port 8080 and we should see the `dist` folder.\n1. Try `http://localhost:8080/api/pirates/3` and you should get JSON back.\n\nNOTE - if you make a change to the files, you'll see it on `localhost:5173`, but not on `localhost:8080` since it's serving the static `dist` folder.\n\n<br>\n\n## DEPLOY TO GCP\n\n1. Go to the [Google Cloud Console](https://console.cloud.google.com/)\n2. Create a New Project\n3. Using Cloud Run which is serverless, only billed when someone sends a request.\n4. In GCP CLI - `gcloud auth login`\n5. `gcloud config set project PROJECT_ID`\n6. Deploy to Cloud Run and define what service should be called: `gcloud run deploy pirate-service-0801`. Note - make sure you're in the parent directory.\n7. A few APIs are not yet enabled. Click yes.\n\n ```js\n The following APIs are not enabled on project [pirate-app-project-08012024]:\n        artifactregistry.googleapis.com // makes it easy to rollback to previous revisions\n        cloudbuild.googleapis.com\n        run.googleapis.com\n ```\n\n1. Choose the region closest to you.\n2. Choose yes for next 2 questions. _Cloud Build question should only com up the first time._\n3. Deployment can take 3 minutes\n4. When it's done the URL should give you the same response as locally: `https://pirate-service-0801-js6e7clajq-uc.a.run.app/api/pirates/3`\n\n<br>\n\n## Add SQL Lite\n\n1. In the root directory: `npm install sequelize cors sqlite3`\n2. Add this to `index.js`\n\n ```js\n const { Sequelize, Model, DataTypes } = require('sequelize');\n const cors = require(\"cors\");\n\n  ...\n  \n app.use(cors())\n \n  ...\n  \n // Create Sequelize instance\n const sequelize = new Sequelize({\n   dialect: 'sqlite',\n   storage: './database.sqlite'\n });\n \n  ...\n  \n // Define User model\n class User extends Model {}\n User.init({\n   name: DataTypes.STRING,\n   email: DataTypes.STRING,\n   password: DataTypes.STRING\n }, { sequelize, modelName: 'user' });\n \n // Sync models with database\n sequelize.sync();\n\n app.get('/api/seeds', async (req, res) => {\n\n\n   const users = [\n     { name: \"John Doe\", email: \"john@example.com\", password: \"password1\" },\n     { name: \"Jane Smith\", email: \"jane@example.com\", password: \"password2\" },\n     { name: \"Mike Johnson\", email: \"mike@example.com\", password: \"password3\" },\n     { name: \"Sarah Williams\", email: \"sarah@example.com\", password: \"password4\" },\n     { name: \"David Brown\", email: \"david@example.com\", password: \"password5\" }\n   ];\n   users.forEach(u => User.create(u));\n   // const users = await User.findAll();\n   res.json(users);\n }); \n\n app.post('/api/users', async (req, res) => {\n   const user = await User.create(req.body);\n   res.json(user);\n });\n \n \n // CRUD routes for User model\n app.get('/api/users', async (req, res) => {\n   const users = await User.findAll();\n   res.json(users);\n });\n \n app.get('/api/users/:id', async (req, res) => {\n   const user = await User.findByPk(req.params.id);\n   res.json(user);\n });\n ```\n\n1. `cd` into `react-app` and `npm run dev`.\n2. Then, `cd` into the root and run `npm run start`\n2. Run `http://localhost:8080/api/seeds` then `http://localhost:8080/api/users`\n\n<br>\n\n## Push to GitHub\n\n1. Create a new repo and push\n2. SHOW GITHUB ACTIONS - Search for \"google\" and \"Deploy to Cloud Run from Source\"\n3. Click configure\n3. Get these from GCP Project and Cloud Run:\n\n ```js\n env:\n   PROJECT_ID: react-pirate-app-431121 # TODO: update Google Cloud project id\n   SERVICE: pirate-app # TODO: update Cloud Run service name\n   REGION: us-central1 # TODO: update Cloud Run service region\n   ENVIRONMENT: production\n    ```\n  \n4. Add these under `steps` and `name: Checkout`:\n\n ```js\n - name: Install Dependencies\n  working-directory: ./react-app\n  run: npm install\n \n - name: Build React App\n  working-directory: ./react-app\n  run: npm run build\n ```\n\n1. In the file uncomment the Alternative option for authentication:\n\n ```yaml\n # NOTE: Alternative option - authentication via credentials json\n - name: Google Auth\n  id: auth\n  uses: 'google-github-actions/auth@v0'\n  with:\n  credentials_json: '${{ secrets.GCP_CREDENTIALS }}'\n ```\n\n#### Finished yml\n\n```yaml\n# This workflow will deploy source code on Cloud Run when a commit is pushed to\n# the \"main\" branch.\n#\n# To configure this workflow:\n#\n# 1. Enable the following Google Cloud APIs:\n#\n#    - Artifact Registry (artifactregistry.googleapis.com)\n#    - Cloud Build (cloudbuild.googleapis.com)\n#    - Cloud Run (run.googleapis.com)\n#    - IAM Credentials API (iamcredentials.googleapis.com)\n#\n#    You can learn more about enabling APIs at\n#    https://support.google.com/googleapi/answer/6158841.\n#\n# 2. Create and configure a Workload Identity Provider for GitHub:\n#    https://github.com/google-github-actions/auth#preferred-direct-workload-identity-federation.\n#\n#    Depending on how you authenticate, you will need to grant an IAM principal\n#    permissions on Google Cloud:\n#\n#    - Artifact Registry Administrator (roles/artifactregistry.admin)\n#    - Cloud Run Source Developer (roles/run.sourceDeveloper)\n#\n#    You can learn more about setting IAM permissions at\n#    https://cloud.google.com/iam/docs/manage-access-other-resources.\n#\n# 3. Change the values in the \"env\" block to match your values.\n\nname: 'Deploy to Cloud Run from Source'\n\non:\n  push:\n    branches: ['main']\n\nenv:\n  PROJECT_ID: 'ikea-08202024' # TODO: update to your Google Cloud project ID\n  REGION: 'europe-west1' # TODO: update to your region\n  SERVICE: 'ikea-08202024' # TODO: update to your service name\n\njobs:\n  deploy:\n    runs-on: 'ubuntu-latest'\n\n    permissions:\n      contents: 'read'\n      id-token: 'write'\n\n    steps:\n      - name: 'Checkout'\n        uses: 'actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332' # actions/checkout@v4\n      \n      - name: 'Install Dependencies'\n        working-directory: ./react-app\n        run: npm install\n\n      - name: 'Build React App'\n        working-directory: ./react-app\n        run: npm run build\n\n      - name: 'Google Auth'\n        id: auth\n        uses: 'google-github-actions/auth@v0'\n        with:\n          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'\n\n      - name: 'Deploy to Cloud Run'\n        uses: 'google-github-actions/deploy-cloudrun@33553064113a37d688aa6937bacbdc481580be17' # google-github-actions/deploy-cloudrun@v2\n        with:\n          service: '${{ env.SERVICE }}'\n          region: '${{ env.REGION }}'\n          # NOTE: If using a different source folder, update the image name below:\n          source: './'\n\n      # If required, use the Cloud Run URL output in later steps\n      - name: 'Show output'\n        run: |-\n          echo ${{ steps.deploy.outputs.url }}\n```\n\n1. Comment the seciton above it where it mentions Workload Identity Provider.\n2. Get GCP_CREDENTIALS from `Service Account -> Permissions -> Keys` -> Add the entire downloaded JSON file to GH\n5. In your GitHub repo, Go add `Settings -> Secrets and variables -> Actions (GCP_PROJECT_ID, GCP_CREDENTIALS)`\n6. Change things to v2\n7. Commit changes then git pull\n8. Make changes - add, commit and push and watch GH Actions. -->\n"
  },
  {
    "input": "I need a lesson on Deploying Applications to Google Cloud Platform. Make sure it addresses: Build Express and React applications, Add Jest testing to applications, Deploy applications to Google Cloud Platform, Implement CI/CD with GitHub Actions The content should be approximately 700 words with a text-to-code ratio of 0.88. Include 5 images and 1 diagrams. Design this for a platform-guided teaching approach with 7 demonstration points. The instructor will need 90 minutes to prepare. The content should be approximately 700 words with a text-to-code ratio of 0.88. Include 5 images and 1 diagrams.  Design this for a platform-guided teaching approach with 7 demonstration points. The instructor will need 90 minutes to prepare.  The content should follow a platform focused cognitive load pattern with low student autonomy and medium interactivity.",
    "output": "# IKEA Express API / React / GitHub Actions / Google Cloud Deploy\n\n\n### In this repo\n- [Google Cloud Overview](./gcp-walkthrough.md)\n- [Build Node/Express App](./build-express-app.md)\n- [Testing With Postman](./testing-with-postman.md)\n- [Build React App](./build-react-app.md)\n- [Deploy to GCP](./deploy-to-gcp.md)\n- [Deploy to GCP with Github Actions](./deploy-to-gcp-github-actions.md)\n\n## Other repos\n- [IKEA Users App Complete](https://git.generalassemb.ly/marcwright-rem/ikea-users-app)\n- [GCP Deployed App](https://ikea-users-app-alem6gcnna-uc.a.run.app/)\n- [Public GitHub IKEA Users App](https://github.com/marcwright/ikea-users-app)\n\n<!-- # INSTRUCTIONS TO CREATE NODE\n\n## CREATE REACT VITE APP\n\n1. `mkdir pirate-app-08012024`\n1. `npm create vite@latest`\n2. Project Name: `react-app`\n3. React - Javascript\n4. Run these\n\n\t```\n\tcd pirate-app-08012024\n\tnpm install\n\tnpm run dev\n\t```\n\n5. `code .`\n6. make a change to `src/App.tsx` and app will rebuild\n7. `cd react-app` and `npm run build` will create a dist directory to deploy\n\n<br>\n\n## CREATE EXPRESS APP server side\n\n- send static html/js/css to browser\n- Create api for react app to call for data\n\n1. Go up one directory\n2. `npm init -y`\n3. `npm install express nodemon cors`\n3. `touch index.js`\n4. Add code to `index.js`\n\n ```js\n const express = require('express');\n const cors = require('cors');\n const app = express();\n app.use(cors());\n app.use(express.json());\n app.use(express.static(\"react-app/dist\"));\n \n \n app.get(\"/api/pirates/:id\", (req, res) => {\n     const id = req.params.id;\n     const pirate = getPirate(id);\n     if (!pirate) {\n       res.status(404).send(`Pirate ${id} not found`);\n     } else {\n       res.send({ data: pirate });\n     }\n   });\n function getPirate(id) {\n     const pirates = [\n       { id: 1, name: \"Blackbeard\", active: true, country: \"England\" },\n       { id: 2, name: \"Anne Bonny\", active: true, country: \"Ireland\" },\n       { id: 3, name: \"Calico Jack\", active: false, country: \"England\" },\n       { id: 4, name: \"Bartholomew Roberts\", active: true, country: \"Wales\" },\n       { id: 5, name: \"Mary Read\", active: false, country: \"England\" },\n     ];\n     return pirates.find((pirate) => pirate.id == id);\n   }\n \n const port = process.env.PORT || 8080;\n app.listen(port, async () => {\n   console.log(`Server started at ${port}`);\n }); \n ```\n\n5. Add a `start` command to `package.json`\n\n ```js\n   \"scripts\": {\n     \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n     \"start\": \"nodemon index.js\" \n   }, \n ```\n\n1. The server should start on port 8080 and we should see the `dist` folder.\n1. Try `http://localhost:8080/api/pirates/3` and you should get JSON back.\n\nNOTE - if you make a change to the files, you'll see it on `localhost:5173`, but not on `localhost:8080` since it's serving the static `dist` folder.\n\n<br>\n\n## DEPLOY TO GCP\n\n1. Go to the [Google Cloud Console](https://console.cloud.google.com/)\n2. Create a New Project\n3. Using Cloud Run which is serverless, only billed when someone sends a request.\n4. In GCP CLI - `gcloud auth login`\n5. `gcloud config set project PROJECT_ID`\n6. Deploy to Cloud Run and define what service should be called: `gcloud run deploy pirate-service-0801`. Note - make sure you're in the parent directory.\n7. A few APIs are not yet enabled. Click yes.\n\n ```js\n The following APIs are not enabled on project [pirate-app-project-08012024]:\n        artifactregistry.googleapis.com // makes it easy to rollback to previous revisions\n        cloudbuild.googleapis.com\n        run.googleapis.com\n ```\n\n1. Choose the region closest to you.\n2. Choose yes for next 2 questions. _Cloud Build question should only com up the first time._\n3. Deployment can take 3 minutes\n4. When it's done the URL should give you the same response as locally: `https://pirate-service-0801-js6e7clajq-uc.a.run.app/api/pirates/3`\n\n<br>\n\n## Add SQL Lite\n\n1. In the root directory: `npm install sequelize cors sqlite3`\n2. Add this to `index.js`\n\n ```js\n const { Sequelize, Model, DataTypes } = require('sequelize');\n const cors = require(\"cors\");\n\n  ...\n  \n app.use(cors())\n \n  ...\n  \n // Create Sequelize instance\n const sequelize = new Sequelize({\n   dialect: 'sqlite',\n   storage: './database.sqlite'\n });\n \n  ...\n  \n // Define User model\n class User extends Model {}\n User.init({\n   name: DataTypes.STRING,\n   email: DataTypes.STRING,\n   password: DataTypes.STRING\n }, { sequelize, modelName: 'user' });\n \n // Sync models with database\n sequelize.sync();\n\n app.get('/api/seeds', async (req, res) => {\n\n\n   const users = [\n     { name: \"John Doe\", email: \"john@example.com\", password: \"password1\" },\n     { name: \"Jane Smith\", email: \"jane@example.com\", password: \"password2\" },\n     { name: \"Mike Johnson\", email: \"mike@example.com\", password: \"password3\" },\n     { name: \"Sarah Williams\", email: \"sarah@example.com\", password: \"password4\" },\n     { name: \"David Brown\", email: \"david@example.com\", password: \"password5\" }\n   ];\n   users.forEach(u => User.create(u));\n   // const users = await User.findAll();\n   res.json(users);\n }); \n\n app.post('/api/users', async (req, res) => {\n   const user = await User.create(req.body);\n   res.json(user);\n });\n \n \n // CRUD routes for User model\n app.get('/api/users', async (req, res) => {\n   const users = await User.findAll();\n   res.json(users);\n });\n \n app.get('/api/users/:id', async (req, res) => {\n   const user = await User.findByPk(req.params.id);\n   res.json(user);\n });\n ```\n\n1. `cd` into `react-app` and `npm run dev`.\n2. Then, `cd` into the root and run `npm run start`\n2. Run `http://localhost:8080/api/seeds` then `http://localhost:8080/api/users`\n\n<br>\n\n## Push to GitHub\n\n1. Create a new repo and push\n2. SHOW GITHUB ACTIONS - Search for \"google\" and \"Deploy to Cloud Run from Source\"\n3. Click configure\n3. Get these from GCP Project and Cloud Run:\n\n ```js\n env:\n   PROJECT_ID: react-pirate-app-431121 # TODO: update Google Cloud project id\n   SERVICE: pirate-app # TODO: update Cloud Run service name\n   REGION: us-central1 # TODO: update Cloud Run service region\n   ENVIRONMENT: production\n    ```\n  \n4. Add these under `steps` and `name: Checkout`:\n\n ```js\n - name: Install Dependencies\n  working-directory: ./react-app\n  run: npm install\n \n - name: Build React App\n  working-directory: ./react-app\n  run: npm run build\n ```\n\n1. In the file uncomment the Alternative option for authentication:\n\n ```yaml\n # NOTE: Alternative option - authentication via credentials json\n - name: Google Auth\n  id: auth\n  uses: 'google-github-actions/auth@v0'\n  with:\n  credentials_json: '${{ secrets.GCP_CREDENTIALS }}'\n ```\n\n#### Finished yml\n\n```yaml\n# This workflow will deploy source code on Cloud Run when a commit is pushed to\n# the \"main\" branch.\n#\n# To configure this workflow:\n#\n# 1. Enable the following Google Cloud APIs:\n#\n#    - Artifact Registry (artifactregistry.googleapis.com)\n#    - Cloud Build (cloudbuild.googleapis.com)\n#    - Cloud Run (run.googleapis.com)\n#    - IAM Credentials API (iamcredentials.googleapis.com)\n#\n#    You can learn more about enabling APIs at\n#    https://support.google.com/googleapi/answer/6158841.\n#\n# 2. Create and configure a Workload Identity Provider for GitHub:\n#    https://github.com/google-github-actions/auth#preferred-direct-workload-identity-federation.\n#\n#    Depending on how you authenticate, you will need to grant an IAM principal\n#    permissions on Google Cloud:\n#\n#    - Artifact Registry Administrator (roles/artifactregistry.admin)\n#    - Cloud Run Source Developer (roles/run.sourceDeveloper)\n#\n#    You can learn more about setting IAM permissions at\n#    https://cloud.google.com/iam/docs/manage-access-other-resources.\n#\n# 3. Change the values in the \"env\" block to match your values.\n\nname: 'Deploy to Cloud Run from Source'\n\non:\n  push:\n    branches: ['main']\n\nenv:\n  PROJECT_ID: 'ikea-08202024' # TODO: update to your Google Cloud project ID\n  REGION: 'europe-west1' # TODO: update to your region\n  SERVICE: 'ikea-08202024' # TODO: update to your service name\n\njobs:\n  deploy:\n    runs-on: 'ubuntu-latest'\n\n    permissions:\n      contents: 'read'\n      id-token: 'write'\n\n    steps:\n      - name: 'Checkout'\n        uses: 'actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332' # actions/checkout@v4\n      \n      - name: 'Install Dependencies'\n        working-directory: ./react-app\n        run: npm install\n\n      - name: 'Build React App'\n        working-directory: ./react-app\n        run: npm run build\n\n      - name: 'Google Auth'\n        id: auth\n        uses: 'google-github-actions/auth@v0'\n        with:\n          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'\n\n      - name: 'Deploy to Cloud Run'\n        uses: 'google-github-actions/deploy-cloudrun@33553064113a37d688aa6937bacbdc481580be17' # google-github-actions/deploy-cloudrun@v2\n        with:\n          service: '${{ env.SERVICE }}'\n          region: '${{ env.REGION }}'\n          # NOTE: If using a different source folder, update the image name below:\n          source: './'\n\n      # If required, use the Cloud Run URL output in later steps\n      - name: 'Show output'\n        run: |-\n          echo ${{ steps.deploy.outputs.url }}\n```\n\n1. Comment the seciton above it where it mentions Workload Identity Provider.\n2. Get GCP_CREDENTIALS from `Service Account -> Permissions -> Keys` -> Add the entire downloaded JSON file to GH\n5. In your GitHub repo, Go add `Settings -> Secrets and variables -> Actions (GCP_PROJECT_ID, GCP_CREDENTIALS)`\n6. Change things to v2\n7. Commit changes then git pull\n8. Make changes - add, commit and push and watch GH Actions. -->\n"
  },
  {
    "input": "Create a lesson about Introduction to Object-Oriented Programming that covers these objectives: Understand OOP principles, Implement classes and objects, Apply encapsulation, inheritance, and polymorphism The content should be approximately 800 words with a text-to-code ratio of 0.91. Include 0 images and 3 diagrams. Design this for a conceptual teaching approach with 5 demonstration points. The instructor will need 60 minutes to prepare. The content should be approximately 800 words with a text-to-code ratio of 0.91. Include 0 images and 3 diagrams.  Design this for a conceptual teaching approach with 5 demonstration points. The instructor will need 60 minutes to prepare.  The content should follow a concept heavy cognitive load pattern with medium student autonomy and medium interactivity.",
    "output": "| Title | Type | Duration | Creator |\n| --- | -- | -- | --- |\n| Intro to Object-Oriented Programming | Lesson | 0:30 | Victor Grazi, NYC |\n\n# ![](https://ga-dash.s3.amazonaws.com/production/assets/logo-9f88ae6c9c3871690e33280fcf557f33.png) Intro to Object-Oriented Programming\n\n### Learning Objectives\n\nAt the end of this lesson, students will be able to:\n- Define the four principles of object-oriented programming.\n- Explain how classes and objects factor into object-oriented programming.\n\n### Lesson Guide\n\n| Timing  | Type  | Topic  |\n|:-:|---|---|\n| 5 min  | [Opening](#opening-5-min)  | Learning Objectives |\n| 10 min  | [Introduction](#the-four-principles-of-oop-10-min)  | The Four Principles of OOP |\n| 10 min  | [Demo](#classes-and-modifiers-10-min)  | Classes sand Modifiers |\n| 5 min  | [Conclusion](#conclusion-5-min)  | Review/Recap |\n\n## Opening (5 min)\n\n**Object-oriented programming** (OOP) is a concept that was first introduced in the 1960s with the advent of the Simula programming language and became popular some 25 years later with C++.\n\nWhereas earlier languages were **procedural** in nature, object-oriented programming introduced the concept of **objects** \u2014 compartments of data and functionality that could easily retain and modify their own instance data.\n\n-----\n\n## The Four Principles of OOP (10 min)\n\nThe four pillars of object-oriented programming are:\n\n* Abstraction\n* Polymorphism\n* Inheritance\n* Encapsulation\n\n> Why are they ordered like that? Because it spells \"A PIE.\" If you like pie and acronyms, this might help you remember these four concepts!\n\n### Abstraction\n\nThe idea behind abstraction is that the average person doesn't need to know the inner workings of something in order to use it successfully. For example, you don't have to be a mechanic to drive a car.\n\n### Encapsulation\n\nEncapsulation is related to abstraction but goes a step further. Not only does the average user not need to have access to the inner workings of something in order to use it, if they do have access, it may actually be harmful.\n\nYou could technically start your car with a screwdriver or directly with electricity, but you really shouldn't \u2014 you might hurt yourself or damage your car. Likewise, your users don't always need direct access to sensitive parts of your code.\n\n![](https://res.cloudinary.com/briezh/image/upload/v1560812857/bike-brakes_pvfblg.jpg)\n\n> Image credit goes to [this article](https://dev.to/charanrajgolla/beginners-guide---object-oriented-programming), which we highly recommend reading if this course feels a bit too fast paced.\n\n### Inheritance\n\nInheritance allows classes to \"inherit\" code from one another. The base class is called the **parent** and the inheritor or beneficiary class is called the **child**. It's just one more way of keeping our code shorter and simpler.\n\nThe most frequent use of inheritance is for deriving classes using existing classes, which provides reusability. The existing classes remain unchanged. By promoting reusability in our code, the development time of software is reduced.\n\n### Polymorphism\n\nPolymorphism simply means \"many forms.\" It refers to the fact that a method could have multiple implementations, either differing between a parent and a child class (method overriding) or depending on the type and number of arguments (method overloading).\n\n----\n\n### Understanding Key Object-Oriented Programming Concepts: Polymorphism, Inheritance, Encapsulation, and Abstraction\n\n<details>\n<summary>What is polymorphism and how can it be observed in everyday life?</summary>\n<br>\nPolymorphism in programming refers to the ability of different objects to respond to the same function or method call in their own unique ways. It's like having a universal remote control that can operate different devices (like TVs, DVD players, and stereos) using the same buttons. Each device responds differently to the same command based on its unique functionality.\n</details>\n\n\n<details>\n<summary>What is polymorphism and how can it be observed in everyday life?</summary>\n<br>\nInheritance in programming allows new classes to receive or inherit properties and methods from existing classes, similar to how children inherit traits from their parents. For example, a child might inherit certain physical traits like hair color or height from their parents. Similarly, in programming, a 'Car' class might inherit traits from a 'Vehicle' class, such as the ability to move or stop.\n</details>\n\n<details>\n<summary>How does encapsulation relate to a personal diary?</summary>\n<br>\nEncapsulation in programming is about keeping some components private inside a class and only exposing what is necessary to the outside world. It\u2019s similar to a personal diary. You keep your thoughts and feelings written in the diary private, and you only share what you choose to tell others. This protects the data from being accessed or modified directly.\n</details>\n\n<details>\n<summary>What is abstraction and how is it similar to using a smartphone?</summary>\n<br>\nAbstraction in programming involves hiding complex details behind a simple interface. It\u2019s like using a smartphone; you can call, text, or take photos without knowing the detailed inner workings of the device, such as how it processes signals or captures images. Abstraction allows you to interact with the phone through simple icons and actions.\n</details>\n\n\n## Classes and Modifiers (10 min)\n\nBefore object-oriented programming came along, programming languages like C sported a feature called `struct` \u2014 a way of defining a common format to allocate blocks of consistent data types.\n \nFor example:\n\n```java\nstruct Person { \n    double birthdate;\n    int id; \n    char name[50];\n} \n```\n\nThat would basically allow you to carve out memory for all of the structure's variables (e.g., `birthdate`, `id`, `name`) simply by assigning a new `struct`.\n\nNow that we have data as a `struct`, why not add **functionality** to that structure (e.g., derive a person's age given today's date) and include that functionality inside the `struct` itself? That's exactly what a **class** is \u2014 a data structure with functions or methods.\n\n> In our example of deriving a person's age given today's date, we might create a method called `getCurrentAge()` or something similar.\n\n### Defining a Class\n\nWe've already seen several examples of classes. They all conform to this common pattern:\n\n```java\npublic class MyClass {\n    // guts of the class\n}\n```\n\nIn this example, `public` refers to the class visibility. Top-level classes can only be `public` or default (unspecified). \"Top level\" means they're not inner classes, which we'll define later in this lesson.\n\n`public` classes can be referenced by any other class, and this is the most common class visibility. A file may contain **no more than one** `public` class. The rule is that every top-level `public` Java class must reside in a file that exactly matches the file name (minus the `.java` file type). \n\n#### Default Classes\n\nDefault classes don't specify an access modifier. For example:\n\n```java\nclass MyDefaultClass {}\n```\n\nThey can be accessed in the current file, as well as by other classes in the same package. For this reason, the default visibility level is called \"package\" or \"package-private.\"\n\nPackage and public are the only access levels available for top-level classes. But as we'll see, inner classes can also be `protected` or `private`.\n\n#### Access Levels\n\nThe access levels \u2014 going from most to least restrictive \u2014 are:\n\n```\nprivate --> package --> protected --> public\n```\n\n`private`, `protected`, and `public` are all **access modifiers**, which means you specifically add them in so you can change the access (or protection) level away from the default we described above.\n\nThis nifty table from [Oracle's docs on access control](https://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html) shows what's unique about each level:\n\n![](https://res.cloudinary.com/briezh/image/upload/v1560810976/Screen_Shot_2019-06-17_at_3.35.38_PM_fq9ffm.png)\n\n----\n\n## Conclusion (5 min)\n\nObject-oriented programming is the practice of using classes and objects to make code modular (encapsulated) and often reusable. A class can be thought of as a blueprint for a building or a pattern for a dress. There's one blueprint, but you can build many buildings with it. There's one dress pattern, but you can manufacture many dresses with it.\n\n> **Knowledge Check**: Can you define each of the four OOP pillars?\n> - Abstraction\n> - Polymorphism\n> - Inheritance\n> - Encapsulation\n\n## Additional Resources\n\n* [Oracle Docs: Access Control](https://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html)\n* [OOP for Beginners](https://dev.to/charanrajgolla/beginners-guide---object-oriented-programming)\n* [Four Principles of OOP](https://medium.com/@cancerian0684/what-are-four-basic-principles-of-object-oriented-programming-645af8b43727)\n\n\n"
  },
  {
    "input": "I need a lesson on Introduction to Object-Oriented Programming. Make sure it addresses: Understand OOP principles, Implement classes and objects, Apply encapsulation, inheritance, and polymorphism The content should be approximately 800 words with a text-to-code ratio of 0.91. Include 0 images and 3 diagrams. Design this for a conceptual teaching approach with 5 demonstration points. The instructor will need 60 minutes to prepare. The content should be approximately 800 words with a text-to-code ratio of 0.91. Include 0 images and 3 diagrams.  Design this for a conceptual teaching approach with 5 demonstration points. The instructor will need 60 minutes to prepare.  The content should follow a concept heavy cognitive load pattern with medium student autonomy and medium interactivity.",
    "output": "| Title | Type | Duration | Creator |\n| --- | -- | -- | --- |\n| Intro to Object-Oriented Programming | Lesson | 0:30 | Victor Grazi, NYC |\n\n# ![](https://ga-dash.s3.amazonaws.com/production/assets/logo-9f88ae6c9c3871690e33280fcf557f33.png) Intro to Object-Oriented Programming\n\n### Learning Objectives\n\nAt the end of this lesson, students will be able to:\n- Define the four principles of object-oriented programming.\n- Explain how classes and objects factor into object-oriented programming.\n\n### Lesson Guide\n\n| Timing  | Type  | Topic  |\n|:-:|---|---|\n| 5 min  | [Opening](#opening-5-min)  | Learning Objectives |\n| 10 min  | [Introduction](#the-four-principles-of-oop-10-min)  | The Four Principles of OOP |\n| 10 min  | [Demo](#classes-and-modifiers-10-min)  | Classes sand Modifiers |\n| 5 min  | [Conclusion](#conclusion-5-min)  | Review/Recap |\n\n## Opening (5 min)\n\n**Object-oriented programming** (OOP) is a concept that was first introduced in the 1960s with the advent of the Simula programming language and became popular some 25 years later with C++.\n\nWhereas earlier languages were **procedural** in nature, object-oriented programming introduced the concept of **objects** \u2014 compartments of data and functionality that could easily retain and modify their own instance data.\n\n-----\n\n## The Four Principles of OOP (10 min)\n\nThe four pillars of object-oriented programming are:\n\n* Abstraction\n* Polymorphism\n* Inheritance\n* Encapsulation\n\n> Why are they ordered like that? Because it spells \"A PIE.\" If you like pie and acronyms, this might help you remember these four concepts!\n\n### Abstraction\n\nThe idea behind abstraction is that the average person doesn't need to know the inner workings of something in order to use it successfully. For example, you don't have to be a mechanic to drive a car.\n\n### Encapsulation\n\nEncapsulation is related to abstraction but goes a step further. Not only does the average user not need to have access to the inner workings of something in order to use it, if they do have access, it may actually be harmful.\n\nYou could technically start your car with a screwdriver or directly with electricity, but you really shouldn't \u2014 you might hurt yourself or damage your car. Likewise, your users don't always need direct access to sensitive parts of your code.\n\n![](https://res.cloudinary.com/briezh/image/upload/v1560812857/bike-brakes_pvfblg.jpg)\n\n> Image credit goes to [this article](https://dev.to/charanrajgolla/beginners-guide---object-oriented-programming), which we highly recommend reading if this course feels a bit too fast paced.\n\n### Inheritance\n\nInheritance allows classes to \"inherit\" code from one another. The base class is called the **parent** and the inheritor or beneficiary class is called the **child**. It's just one more way of keeping our code shorter and simpler.\n\nThe most frequent use of inheritance is for deriving classes using existing classes, which provides reusability. The existing classes remain unchanged. By promoting reusability in our code, the development time of software is reduced.\n\n### Polymorphism\n\nPolymorphism simply means \"many forms.\" It refers to the fact that a method could have multiple implementations, either differing between a parent and a child class (method overriding) or depending on the type and number of arguments (method overloading).\n\n----\n\n### Understanding Key Object-Oriented Programming Concepts: Polymorphism, Inheritance, Encapsulation, and Abstraction\n\n<details>\n<summary>What is polymorphism and how can it be observed in everyday life?</summary>\n<br>\nPolymorphism in programming refers to the ability of different objects to respond to the same function or method call in their own unique ways. It's like having a universal remote control that can operate different devices (like TVs, DVD players, and stereos) using the same buttons. Each device responds differently to the same command based on its unique functionality.\n</details>\n\n\n<details>\n<summary>What is polymorphism and how can it be observed in everyday life?</summary>\n<br>\nInheritance in programming allows new classes to receive or inherit properties and methods from existing classes, similar to how children inherit traits from their parents. For example, a child might inherit certain physical traits like hair color or height from their parents. Similarly, in programming, a 'Car' class might inherit traits from a 'Vehicle' class, such as the ability to move or stop.\n</details>\n\n<details>\n<summary>How does encapsulation relate to a personal diary?</summary>\n<br>\nEncapsulation in programming is about keeping some components private inside a class and only exposing what is necessary to the outside world. It\u2019s similar to a personal diary. You keep your thoughts and feelings written in the diary private, and you only share what you choose to tell others. This protects the data from being accessed or modified directly.\n</details>\n\n<details>\n<summary>What is abstraction and how is it similar to using a smartphone?</summary>\n<br>\nAbstraction in programming involves hiding complex details behind a simple interface. It\u2019s like using a smartphone; you can call, text, or take photos without knowing the detailed inner workings of the device, such as how it processes signals or captures images. Abstraction allows you to interact with the phone through simple icons and actions.\n</details>\n\n\n## Classes and Modifiers (10 min)\n\nBefore object-oriented programming came along, programming languages like C sported a feature called `struct` \u2014 a way of defining a common format to allocate blocks of consistent data types.\n \nFor example:\n\n```java\nstruct Person { \n    double birthdate;\n    int id; \n    char name[50];\n} \n```\n\nThat would basically allow you to carve out memory for all of the structure's variables (e.g., `birthdate`, `id`, `name`) simply by assigning a new `struct`.\n\nNow that we have data as a `struct`, why not add **functionality** to that structure (e.g., derive a person's age given today's date) and include that functionality inside the `struct` itself? That's exactly what a **class** is \u2014 a data structure with functions or methods.\n\n> In our example of deriving a person's age given today's date, we might create a method called `getCurrentAge()` or something similar.\n\n### Defining a Class\n\nWe've already seen several examples of classes. They all conform to this common pattern:\n\n```java\npublic class MyClass {\n    // guts of the class\n}\n```\n\nIn this example, `public` refers to the class visibility. Top-level classes can only be `public` or default (unspecified). \"Top level\" means they're not inner classes, which we'll define later in this lesson.\n\n`public` classes can be referenced by any other class, and this is the most common class visibility. A file may contain **no more than one** `public` class. The rule is that every top-level `public` Java class must reside in a file that exactly matches the file name (minus the `.java` file type). \n\n#### Default Classes\n\nDefault classes don't specify an access modifier. For example:\n\n```java\nclass MyDefaultClass {}\n```\n\nThey can be accessed in the current file, as well as by other classes in the same package. For this reason, the default visibility level is called \"package\" or \"package-private.\"\n\nPackage and public are the only access levels available for top-level classes. But as we'll see, inner classes can also be `protected` or `private`.\n\n#### Access Levels\n\nThe access levels \u2014 going from most to least restrictive \u2014 are:\n\n```\nprivate --> package --> protected --> public\n```\n\n`private`, `protected`, and `public` are all **access modifiers**, which means you specifically add them in so you can change the access (or protection) level away from the default we described above.\n\nThis nifty table from [Oracle's docs on access control](https://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html) shows what's unique about each level:\n\n![](https://res.cloudinary.com/briezh/image/upload/v1560810976/Screen_Shot_2019-06-17_at_3.35.38_PM_fq9ffm.png)\n\n----\n\n## Conclusion (5 min)\n\nObject-oriented programming is the practice of using classes and objects to make code modular (encapsulated) and often reusable. A class can be thought of as a blueprint for a building or a pattern for a dress. There's one blueprint, but you can build many buildings with it. There's one dress pattern, but you can manufacture many dresses with it.\n\n> **Knowledge Check**: Can you define each of the four OOP pillars?\n> - Abstraction\n> - Polymorphism\n> - Inheritance\n> - Encapsulation\n\n## Additional Resources\n\n* [Oracle Docs: Access Control](https://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html)\n* [OOP for Beginners](https://dev.to/charanrajgolla/beginners-guide---object-oriented-programming)\n* [Four Principles of OOP](https://medium.com/@cancerian0684/what-are-four-basic-principles-of-object-oriented-programming-645af8b43727)\n\n\n"
  },
  {
    "input": "Create a lesson about React Router DOM that covers these objectives: Understand client-side routing in React, Implement routes with React Router, Create navigation links and handle route parameters, Use programmatic navigation The content should be approximately 650 words with a text-to-code ratio of 0.88. Include 2 images and 1 diagrams.. The content should be approximately 650 words with a text-to-code ratio of 0.88. Include 2 images and 1 diagrams.  ",
    "output": "<h1>\n  <span class=\"prefix\"></span>\n  <span class=\"headline\">React Router DOM</span>\n</h1>\n\n## About\n\nThis module introduces the essentials of React Router, a powerful library used for adding navigation functionality within React applications. You'll learn how to install React Router, use link components for navigation, handle client-side routing, and implement dynamic routes.\n\nAdditionally, the lessons will cover programmatic navigation to manage redirects, making the user experience in your single-page applications more like multi-page applications. Each topic is designed to build on your existing knowledge of React components, controlled forms, and passing props.\n\n## Content\n\n| Lesson                                                         | Skills                                                                |\n| -------------------------------------------------------------- | --------------------------------------------------------------------- |\n| [Setup](./setup/README.md)                                     | Setting up the development environment.                               |\n| [Concepts](./concepts/README.md)                               | Describing usefulness of React Router.                                |\n| [Installing React Router](./installing-react-router/README.md) | Adding React Router to an application.                                |\n| [Creating Links](./creating-links/README.md)                   | Implementing `Link` components for navigation.                        |\n| [Creating Routes](./creating-routes/README.md)                 | Creating Routes with the `Routes` and `Route` components.             |\n| [Route Parameters](./route-parameters/README.md)               | Creating dynamic routes using dynamic segments.                       |\n| [Programmatic Navigation](./programmatic-navigation/README.md) | Redirecting automatically with React Router's `useNavigation()` hook. |\n\n## References\n\n\ud83d\udcd6 [Reference Materials](./references/README.md)\n\n## Internal\n\n### Prerequisites\n\n- Controlled Forms in React\n- Lifting State in React\n\n### Solution code\n\n\ud83c\udfc1 [Solution code](https://git.generalassemb.ly/modular-curriculum-all-courses/react-router-dom-solution)\n\n### Course landing pages\n\n- [SEB - Software Engineering Bootcamp](https://pages.git.generalassemb.ly/modular-curriculum-all-courses/react-router-dom/canvas-landing-pages/seb.html)\n- [RDS - React Development Short Course](https://pages.git.generalassemb.ly/modular-curriculum-all-courses/react-router-dom/canvas-landing-pages/rds.html)\n- [Fallback](https://pages.git.generalassemb.ly/modular-curriculum-all-courses/react-router-dom/canvas-landing-pages/fallback.html)\n\n### Resources\n\n\u270f\ufe0f [Instructor Guide](./internal-resources/instructor-guide.md)\n\n\ud83c\udfa5 [Video Hub](./internal-resources/video-hub.md)\n\n\ud83c\udfd7\ufe0f [Release Notes](./internal-resources/release-notes.md)\n\n---\n\n**Find a \ud83d\udc7e bug \ud83d\udc7e or have suggestions? [Let us know](https://pages.git.generalassemb.ly/modular-curriculum-all-courses/universal-resources-internal/module-feedback.html)!**\n"
  },
  {
    "input": "I need a lesson on React Router DOM. Make sure it addresses: Understand client-side routing in React, Implement routes with React Router, Create navigation links and handle route parameters, Use programmatic navigation The content should be approximately 650 words with a text-to-code ratio of 0.88. Include 2 images and 1 diagrams.. The content should be approximately 650 words with a text-to-code ratio of 0.88. Include 2 images and 1 diagrams.  ",
    "output": "<h1>\n  <span class=\"prefix\"></span>\n  <span class=\"headline\">React Router DOM</span>\n</h1>\n\n## About\n\nThis module introduces the essentials of React Router, a powerful library used for adding navigation functionality within React applications. You'll learn how to install React Router, use link components for navigation, handle client-side routing, and implement dynamic routes.\n\nAdditionally, the lessons will cover programmatic navigation to manage redirects, making the user experience in your single-page applications more like multi-page applications. Each topic is designed to build on your existing knowledge of React components, controlled forms, and passing props.\n\n## Content\n\n| Lesson                                                         | Skills                                                                |\n| -------------------------------------------------------------- | --------------------------------------------------------------------- |\n| [Setup](./setup/README.md)                                     | Setting up the development environment.                               |\n| [Concepts](./concepts/README.md)                               | Describing usefulness of React Router.                                |\n| [Installing React Router](./installing-react-router/README.md) | Adding React Router to an application.                                |\n| [Creating Links](./creating-links/README.md)                   | Implementing `Link` components for navigation.                        |\n| [Creating Routes](./creating-routes/README.md)                 | Creating Routes with the `Routes` and `Route` components.             |\n| [Route Parameters](./route-parameters/README.md)               | Creating dynamic routes using dynamic segments.                       |\n| [Programmatic Navigation](./programmatic-navigation/README.md) | Redirecting automatically with React Router's `useNavigation()` hook. |\n\n## References\n\n\ud83d\udcd6 [Reference Materials](./references/README.md)\n\n## Internal\n\n### Prerequisites\n\n- Controlled Forms in React\n- Lifting State in React\n\n### Solution code\n\n\ud83c\udfc1 [Solution code](https://git.generalassemb.ly/modular-curriculum-all-courses/react-router-dom-solution)\n\n### Course landing pages\n\n- [SEB - Software Engineering Bootcamp](https://pages.git.generalassemb.ly/modular-curriculum-all-courses/react-router-dom/canvas-landing-pages/seb.html)\n- [RDS - React Development Short Course](https://pages.git.generalassemb.ly/modular-curriculum-all-courses/react-router-dom/canvas-landing-pages/rds.html)\n- [Fallback](https://pages.git.generalassemb.ly/modular-curriculum-all-courses/react-router-dom/canvas-landing-pages/fallback.html)\n\n### Resources\n\n\u270f\ufe0f [Instructor Guide](./internal-resources/instructor-guide.md)\n\n\ud83c\udfa5 [Video Hub](./internal-resources/video-hub.md)\n\n\ud83c\udfd7\ufe0f [Release Notes](./internal-resources/release-notes.md)\n\n---\n\n**Find a \ud83d\udc7e bug \ud83d\udc7e or have suggestions? [Let us know](https://pages.git.generalassemb.ly/modular-curriculum-all-courses/universal-resources-internal/module-feedback.html)!**\n"
  },
  {
    "input": "Create a capstone about Full Stack Application Development that covers these objectives: Develop a full-stack application with a financial theme, Apply all technologies covered in the course, Implement best practices in software development The content should be approximately 850 words with a text-to-code ratio of 0.99. Include 0 images and 0 diagrams. Design this for a facilitative teaching approach with 2 demonstration points. The instructor will need 120 minutes to prepare. The content should be approximately 850 words with a text-to-code ratio of 0.99. Include 0 images and 0 diagrams.  Design this for a facilitative teaching approach with 2 demonstration points. The instructor will need 120 minutes to prepare.  The content should follow a sustained high cognitive load pattern with high student autonomy and high interactivity.",
    "output": "# Capstone Starter Code\n\n## Submitting your project\n\n**Project is due on Friday of Week 4**\n\n[Link to Capstone Requirements PDF](./assets/Capstone-Project-Guidelines.pdf)\n\nPlease **fork** and **clone** this repo. To submit your work, please submit a Pull Request with your full name on this repo. You will also present your application during class.\n\n[Pull Request Instructions](https://git.generalassemb.ly/ModernEngineering/start-here/#submitting-your-work-via-pull-request)\n\n_Note: The use of this starter code is optional! Feel free to build your own app from scratch as you see fit._\n\n## Requirements\n\nYou will develop a new full-stack application that leverages all the technologies covered in the course. Prudential has asked that you build an application with a financial theme (e.g. budget tracker app, bill tracker app, etc.). All code will be submitted to your fork of this GitHub repository on GA\u2019s GitHub Enterprise servers. \n\n[The grading rubric can be found in the Capstone Requirements PDF here](./assets/Capstone-Project-Guidelines.pdf)\n\n- Data Model:\n   - Implement and use a PostgreSQL database for storage\n   - Demonstrate your API can write to and read from the database\n- API Endpoints:\n   - Using Express, implement working API endpoints corresponding to CRUD operations\n- React User Interface:\n   - CRUD operations are accessible to a user from a React front-end\n   - _Styling will not be part of the evaluation_\n   - _React Router does not need to be included_\n- Testing:\n   - 3 Jest Unit tests on the React app\n   - 3 Jest Unit tests on the Express app\n   - 1 End-to-End browser test with Selenium\n- Containerization:\n   - Create 3 Dockerfiles (backend, db, frontend) to containerize your application\n   - \n_Note: Reach Out To Instructors To Show Passing Tests Before Proceeding To Containerization._\n\n## Reference Links\n\nRefer to previous lessons to guide you as you build out your full-stack application.\n\n- Backend\n   - [Express Todo Api Lesson](https://git.generalassemb.ly/ModernEngineering/express-to-do-api)\n   - [Testing Express With Supertest](https://git.generalassemb.ly/ModernEngineering/todo-express-api-testing-with-supertest)\n- Frontend\n   - [Connect React frontend to Express API backen](https://git.generalassemb.ly/ModernEngineering/full-stack-react)\n   - [React Jest Testing](https://git.generalassemb.ly/ModernEngineering/jest-react-lab)\n   - [Testing React With Jest Walkthrough](https://git.generalassemb.ly/ModernEngineering/testing-react-with-jest-walkthrough)\n- Full-stack\n   - [Selenium Walkthrough](https://git.generalassemb.ly/ModernEngineering/selenium-walkthrough)\n   - [Dockerize Todo App](https://git.generalassemb.ly/ModernEngineering/dockerize-to-do-app)\n\n## Getting Started\n\n### Backend Express API\n\n1. `cd backend`\n1. `npm i`\n1. `npm run start` will start the server on port 3001\n\n<br>\n\n### Database\n\n- Use the `backend/db/capstone.sql` file to create the schema in your database.\n- Run the `db/capstone.sql` file to create the database, table and data: `psql -U postgres -d name_of_your_app_db < db/capstone.sql`\n\n  _Note 1: If you're asked, the default password for the `postgres` user is either `password` or `postgres`_\n\n  _Note 2: In `index.js`, you have 2 `pool` variables: one for local development and one when you build your backend `Dockerfile`\n\n<br>\n\n### React Frontend\n\n1. `cd frontend`\n1. `npm i`\n1. `npm run start` will start the server on port 3000\n\n## Presentations\n\nPresentations will start on Thursday on a volunteers-first basis. Those who do not present on Thursday will have to present on Friday. Everyone will be asked to share their screen and demo their app. Each person will have 3-5 minutes including Q&A.\n\nWe ask that you demo the following:\n\n- Run `sudo docker ps` to show that you have running Docker containers for the DB, backend, and frontend.\n- Demo that you can Create, Read, Update and Delete on a resource.\n- What are the biggest challenges and biggest wins from your capstone app?\n- Give shoutouts to any peers that helped you out throughout capstone week.\n\n_NOTE: In the interest of time, you are not required to demo your test suites, but you should still have working frontend, backend, and end-to-end tests in your repo.\n\n## Squads\n\nWe've assigned everyone to an instructor so that we get more familiar with individual apps and better provide assistance. Here is when we'll check in.\n\n1. We will check into the main room at 9am EST for attendance. Afterward, we'll split up into squads (in breakouts) for a standup. Here you can address:\n   - What you've completed so far?\n   - What you plan to work on that day\n   - Any blockers\n\n1. We will also have a 1:30pm EST check in after lunch in the Zoom chat each day for attendance.\n\n1. We'll meet in the main room at 4:30pm EST each day for the daily exit ticket. For question \"10. Any other general questions or comments to share?\", please briefly let us know the following:\n   - What did you accomplish today?\n   - Did you hit any blockers?\n   - What\u2019s your plan for tomorrow?\n\n### Squad Assignments\n\n#### Ben\n- Akash\n- Srivalya\n- Arun\n- Richard\n- Ellen\n- Lisa\n- Grant\n- Joe\n- Jason\n\n#### Mario\n- Alpesh\n- Bradley\n- Srinivas\n- Lino\n- Razvan\n- Ed\n- Karen\n- Greg\n\n#### Troy\n- Arpita\n- Sangeetha\n- Priyank\n- Brent\n- Joel\n- Juhi\n- Harish\n- Henri\n- Ken\n"
  },
  {
    "input": "I need a capstone on Full Stack Application Development. Make sure it addresses: Develop a full-stack application with a financial theme, Apply all technologies covered in the course, Implement best practices in software development The content should be approximately 850 words with a text-to-code ratio of 0.99. Include 0 images and 0 diagrams. Design this for a facilitative teaching approach with 2 demonstration points. The instructor will need 120 minutes to prepare. The content should be approximately 850 words with a text-to-code ratio of 0.99. Include 0 images and 0 diagrams.  Design this for a facilitative teaching approach with 2 demonstration points. The instructor will need 120 minutes to prepare.  The content should follow a sustained high cognitive load pattern with high student autonomy and high interactivity.",
    "output": "# Capstone Starter Code\n\n## Submitting your project\n\n**Project is due on Friday of Week 4**\n\n[Link to Capstone Requirements PDF](./assets/Capstone-Project-Guidelines.pdf)\n\nPlease **fork** and **clone** this repo. To submit your work, please submit a Pull Request with your full name on this repo. You will also present your application during class.\n\n[Pull Request Instructions](https://git.generalassemb.ly/ModernEngineering/start-here/#submitting-your-work-via-pull-request)\n\n_Note: The use of this starter code is optional! Feel free to build your own app from scratch as you see fit._\n\n## Requirements\n\nYou will develop a new full-stack application that leverages all the technologies covered in the course. Prudential has asked that you build an application with a financial theme (e.g. budget tracker app, bill tracker app, etc.). All code will be submitted to your fork of this GitHub repository on GA\u2019s GitHub Enterprise servers. \n\n[The grading rubric can be found in the Capstone Requirements PDF here](./assets/Capstone-Project-Guidelines.pdf)\n\n- Data Model:\n   - Implement and use a PostgreSQL database for storage\n   - Demonstrate your API can write to and read from the database\n- API Endpoints:\n   - Using Express, implement working API endpoints corresponding to CRUD operations\n- React User Interface:\n   - CRUD operations are accessible to a user from a React front-end\n   - _Styling will not be part of the evaluation_\n   - _React Router does not need to be included_\n- Testing:\n   - 3 Jest Unit tests on the React app\n   - 3 Jest Unit tests on the Express app\n   - 1 End-to-End browser test with Selenium\n- Containerization:\n   - Create 3 Dockerfiles (backend, db, frontend) to containerize your application\n   - \n_Note: Reach Out To Instructors To Show Passing Tests Before Proceeding To Containerization._\n\n## Reference Links\n\nRefer to previous lessons to guide you as you build out your full-stack application.\n\n- Backend\n   - [Express Todo Api Lesson](https://git.generalassemb.ly/ModernEngineering/express-to-do-api)\n   - [Testing Express With Supertest](https://git.generalassemb.ly/ModernEngineering/todo-express-api-testing-with-supertest)\n- Frontend\n   - [Connect React frontend to Express API backen](https://git.generalassemb.ly/ModernEngineering/full-stack-react)\n   - [React Jest Testing](https://git.generalassemb.ly/ModernEngineering/jest-react-lab)\n   - [Testing React With Jest Walkthrough](https://git.generalassemb.ly/ModernEngineering/testing-react-with-jest-walkthrough)\n- Full-stack\n   - [Selenium Walkthrough](https://git.generalassemb.ly/ModernEngineering/selenium-walkthrough)\n   - [Dockerize Todo App](https://git.generalassemb.ly/ModernEngineering/dockerize-to-do-app)\n\n## Getting Started\n\n### Backend Express API\n\n1. `cd backend`\n1. `npm i`\n1. `npm run start` will start the server on port 3001\n\n<br>\n\n### Database\n\n- Use the `backend/db/capstone.sql` file to create the schema in your database.\n- Run the `db/capstone.sql` file to create the database, table and data: `psql -U postgres -d name_of_your_app_db < db/capstone.sql`\n\n  _Note 1: If you're asked, the default password for the `postgres` user is either `password` or `postgres`_\n\n  _Note 2: In `index.js`, you have 2 `pool` variables: one for local development and one when you build your backend `Dockerfile`\n\n<br>\n\n### React Frontend\n\n1. `cd frontend`\n1. `npm i`\n1. `npm run start` will start the server on port 3000\n\n## Presentations\n\nPresentations will start on Thursday on a volunteers-first basis. Those who do not present on Thursday will have to present on Friday. Everyone will be asked to share their screen and demo their app. Each person will have 3-5 minutes including Q&A.\n\nWe ask that you demo the following:\n\n- Run `sudo docker ps` to show that you have running Docker containers for the DB, backend, and frontend.\n- Demo that you can Create, Read, Update and Delete on a resource.\n- What are the biggest challenges and biggest wins from your capstone app?\n- Give shoutouts to any peers that helped you out throughout capstone week.\n\n_NOTE: In the interest of time, you are not required to demo your test suites, but you should still have working frontend, backend, and end-to-end tests in your repo.\n\n## Squads\n\nWe've assigned everyone to an instructor so that we get more familiar with individual apps and better provide assistance. Here is when we'll check in.\n\n1. We will check into the main room at 9am EST for attendance. Afterward, we'll split up into squads (in breakouts) for a standup. Here you can address:\n   - What you've completed so far?\n   - What you plan to work on that day\n   - Any blockers\n\n1. We will also have a 1:30pm EST check in after lunch in the Zoom chat each day for attendance.\n\n1. We'll meet in the main room at 4:30pm EST each day for the daily exit ticket. For question \"10. Any other general questions or comments to share?\", please briefly let us know the following:\n   - What did you accomplish today?\n   - Did you hit any blockers?\n   - What\u2019s your plan for tomorrow?\n\n### Squad Assignments\n\n#### Ben\n- Akash\n- Srivalya\n- Arun\n- Richard\n- Ellen\n- Lisa\n- Grant\n- Joe\n- Jason\n\n#### Mario\n- Alpesh\n- Bradley\n- Srinivas\n- Lino\n- Razvan\n- Ed\n- Karen\n- Greg\n\n#### Troy\n- Arpita\n- Sangeetha\n- Priyank\n- Brent\n- Joel\n- Juhi\n- Harish\n- Henri\n- Ken\n"
  },
  {
    "input": "Create a course_landing for Advanced Java. Course description: A comprehensive course about advanced Java concepts, algorithms, and data structures. Learning path: Algorithms and Pseudocode, Stacks and Queues, Linked Lists, Binary Search, Sorting Algorithms, Tree Algorithms, Mini-Project The content should be approximately 225 words with a text-to-code ratio of 1.0. Include 0 images and 0 diagrams. Design this for a structured teaching approach with 0 demonstration points. The instructor will need 180 minutes to prepare. The content should follow a preview cognitive load pattern with low student autonomy and low interactivity. that covers these objectives: . The content should be approximately 225 words with a text-to-code ratio of 1.0. Include 0 images and 0 diagrams.  Design this for a structured teaching approach with 0 demonstration points. The instructor will need 180 minutes to prepare.  The content should follow a preview cognitive load pattern with low student autonomy and low interactivity.",
    "output": "# Advanced Java Class Schedule\n\n**Below is the schedule of activities for the week:**\n\n| Time  | Monday | Tuesday | Wednesday | Thursday | Friday |\n|-------|--------|---------|-----------|----------|--------|\n| 9:00  |Setup/Welcome|\ud83d\udfe6 [Understanding Linked Lists](https://git.generalassemb.ly/ENT-Advanced-JAVA/understanding-linked-list)|\ud83d\udfe6 [Understanding Binary Search](https://git.generalassemb.ly/ENT-Advanced-JAVA/binary-search)|\ud83d\udfe6 [Bubble Sort](https://git.generalassemb.ly/ENT-Advanced-JAVA/bubble-sort/)|\ud83d\udfe9 [Mini-Project Day](https://git.generalassemb.ly/ENT-Advanced-JAVA/mini-project)|\n| 9:30  |\ud83d\udfe6 [Fundamentals of Algorithms and Pseudocode](https://git.generalassemb.ly/ENT-Advanced-JAVA/fundamentals-of-algorithms-pseudocode)|\ud83d\udfe6 Cont.|\ud83d\udfe6 Cont.|\ud83d\udfe6 [Selection Sort](https://git.generalassemb.ly/ENT-Advanced-JAVA/selection-sort)| \ud83d\udfe9 Cont.|\n| 10:00 |\ud83d\udfe6 Cont.  |\ud83d\udfe6 Cont.|\ud83d\udfe6 [Exploring Recursion](https://git.generalassemb.ly/ENT-Advanced-JAVA/recursion)|\ud83d\udfe6 [Quick Sort](https://git.generalassemb.ly/ENT-Advanced-JAVA/quicksort/)|\ud83d\udfe9  Cont. |\n| 10:30 |\ud83d\udfe6 Cont.  |\ud83d\udfe6 Cont.|\ud83d\udfe6 Cont.|\ud83d\udfe6 [Merge Sort](https://git.generalassemb.ly/ENT-Advanced-JAVA/merge-sort/)|\ud83d\udfe9  Cont.|\n| 11:00 |\ud83d\udfe6 [Understanding Stacks](https://git.generalassemb.ly/ENT-Advanced-JAVA/atd-stack)|\ud83d\udfe6 [Introduction to Doubly Linked Lists](https://git.generalassemb.ly/ENT-Advanced-JAVA/intro-doubly-linked-lists)|\ud83d\udfe9 [Recursive Functions Lab](https://git.generalassemb.ly/ENT-Advanced-JAVA/day03-lab)|\ud83d\udfe9 [Infix to Postfix Lab](https://git.generalassemb.ly/ENT-Advanced-JAVA/day04-lab)|\ud83d\udfe9  Cont.         |\n| 12:00 | Lunch Break| Lunch Break| Lunch Break | Lunch Break| Lunch Break |\n| 1:00  |\ud83d\udfe6 [Understanding Stacks](https://git.generalassemb.ly/ENT-Advanced-JAVA/atd-stack)|\ud83d\udfe9 [Manipulating Linked lists](https://git.generalassemb.ly/ENT-Advanced-JAVA/day02-lab)|\ud83d\udfe9 [Recursive Functions Lab](https://git.generalassemb.ly/ENT-Advanced-JAVA/day03-lab)|\ud83d\udfe9 [Infix to Postfix Lab](https://git.generalassemb.ly/ENT-Advanced-JAVA/day04-lab)|\ud83d\udfe9  Cont.         |\n| 2:00  |\ud83d\udfe6 [Implementing Queues in Java](https://git.generalassemb.ly/ENT-Advanced-JAVA/adt-queue)|\ud83d\udfe9 Cont.         |\ud83d\udfe6 [Tree Algorithms](https://git.generalassemb.ly/ENT-Advanced-JAVA/tree-algorithms)|\ud83d\udfe6 [Mini-Project Setup](https://git.generalassemb.ly/ENT-Advanced-JAVA/sudoko-project-starter-code)|\ud83d\udfe9  Cont.         |\n| 3:00  |\ud83d\udfe6 Cont.|\ud83d\udfe9 Cont. |\ud83d\udfe6 Cont. |\ud83d\udfe6 Cont. |\ud83d\udfe6 [Presenting](https://git.generalassemb.ly/ENT-Advanced-JAVA/mini-project/blob/main/README.md#presentation-and-reflection) |\n| 4:00  |\ud83d\udfe9 [Array Manipulation Lab](https://git.generalassemb.ly/ENT-Advanced-JAVA/day01-lab.md)|\ud83d\udfe9  Cont.|\ud83d\udfe6 Cont.|\ud83d\udfe6 Cont.|\ud83d\udfe6 Reflection        |\n| 4:30  |\ud83d\udfe9 Cont.|\ud83d\udfe9  Cont.|\ud83d\udfe6 Cont. |\ud83d\udfe6 Cont. |\ud83d\udfe6 Bring it Home|\n\n\nEach session is marked with a colored square indicating the type of activity:\n\n- \ud83d\udfe6 Lesson - Instruction: Instructor-Led Lecture, Guided Walk Through, and Modelling\n- \ud83d\udfe9 Practice - Application: Solo Work, Pair Activity, Group Activity\n\n**For Copying & Pasting Code, Resources, and More Check out\nthis [Resource Google Sheet](https://docs.google.com/spreadsheets/d/11ha4E_HhYW1kfEQV5raAYAgOpVJEzKaOQShEE_mdIMw/edit?usp=drive_link)**\n"
  },
  {
    "input": "I need a course_landing for Advanced Java. Course description: A comprehensive course on advanced Java concepts, algorithms, and data structures. Learning path: Algorithms and Pseudocode, Stacks and Queues, Linked Lists, Binary Search, Sorting Algorithms, Tree Algorithms, Mini-Project The content should be approximately 225 words with a text-to-code ratio of 1.0. Include 0 images and 0 diagrams. Design this for a structured teaching approach with 0 demonstration points. The instructor will need 180 minutes to prepare. The content should follow a preview cognitive load pattern with low student autonomy and low interactivity.. Make sure it addresses: . The content should be approximately 225 words with a text-to-code ratio of 1.0. Include 0 images and 0 diagrams.  Design this for a structured teaching approach with 0 demonstration points. The instructor will need 180 minutes to prepare.  The content should follow a preview cognitive load pattern with low student autonomy and low interactivity.",
    "output": "# Advanced Java Class Schedule\n\n**Below is the schedule of activities for the week:**\n\n| Time  | Monday | Tuesday | Wednesday | Thursday | Friday |\n|-------|--------|---------|-----------|----------|--------|\n| 9:00  |Setup/Welcome|\ud83d\udfe6 [Understanding Linked Lists](https://git.generalassemb.ly/ENT-Advanced-JAVA/understanding-linked-list)|\ud83d\udfe6 [Understanding Binary Search](https://git.generalassemb.ly/ENT-Advanced-JAVA/binary-search)|\ud83d\udfe6 [Bubble Sort](https://git.generalassemb.ly/ENT-Advanced-JAVA/bubble-sort/)|\ud83d\udfe9 [Mini-Project Day](https://git.generalassemb.ly/ENT-Advanced-JAVA/mini-project)|\n| 9:30  |\ud83d\udfe6 [Fundamentals of Algorithms and Pseudocode](https://git.generalassemb.ly/ENT-Advanced-JAVA/fundamentals-of-algorithms-pseudocode)|\ud83d\udfe6 Cont.|\ud83d\udfe6 Cont.|\ud83d\udfe6 [Selection Sort](https://git.generalassemb.ly/ENT-Advanced-JAVA/selection-sort)| \ud83d\udfe9 Cont.|\n| 10:00 |\ud83d\udfe6 Cont.  |\ud83d\udfe6 Cont.|\ud83d\udfe6 [Exploring Recursion](https://git.generalassemb.ly/ENT-Advanced-JAVA/recursion)|\ud83d\udfe6 [Quick Sort](https://git.generalassemb.ly/ENT-Advanced-JAVA/quicksort/)|\ud83d\udfe9  Cont. |\n| 10:30 |\ud83d\udfe6 Cont.  |\ud83d\udfe6 Cont.|\ud83d\udfe6 Cont.|\ud83d\udfe6 [Merge Sort](https://git.generalassemb.ly/ENT-Advanced-JAVA/merge-sort/)|\ud83d\udfe9  Cont.|\n| 11:00 |\ud83d\udfe6 [Understanding Stacks](https://git.generalassemb.ly/ENT-Advanced-JAVA/atd-stack)|\ud83d\udfe6 [Introduction to Doubly Linked Lists](https://git.generalassemb.ly/ENT-Advanced-JAVA/intro-doubly-linked-lists)|\ud83d\udfe9 [Recursive Functions Lab](https://git.generalassemb.ly/ENT-Advanced-JAVA/day03-lab)|\ud83d\udfe9 [Infix to Postfix Lab](https://git.generalassemb.ly/ENT-Advanced-JAVA/day04-lab)|\ud83d\udfe9  Cont.         |\n| 12:00 | Lunch Break| Lunch Break| Lunch Break | Lunch Break| Lunch Break |\n| 1:00  |\ud83d\udfe6 [Understanding Stacks](https://git.generalassemb.ly/ENT-Advanced-JAVA/atd-stack)|\ud83d\udfe9 [Manipulating Linked lists](https://git.generalassemb.ly/ENT-Advanced-JAVA/day02-lab)|\ud83d\udfe9 [Recursive Functions Lab](https://git.generalassemb.ly/ENT-Advanced-JAVA/day03-lab)|\ud83d\udfe9 [Infix to Postfix Lab](https://git.generalassemb.ly/ENT-Advanced-JAVA/day04-lab)|\ud83d\udfe9  Cont.         |\n| 2:00  |\ud83d\udfe6 [Implementing Queues in Java](https://git.generalassemb.ly/ENT-Advanced-JAVA/adt-queue)|\ud83d\udfe9 Cont.         |\ud83d\udfe6 [Tree Algorithms](https://git.generalassemb.ly/ENT-Advanced-JAVA/tree-algorithms)|\ud83d\udfe6 [Mini-Project Setup](https://git.generalassemb.ly/ENT-Advanced-JAVA/sudoko-project-starter-code)|\ud83d\udfe9  Cont.         |\n| 3:00  |\ud83d\udfe6 Cont.|\ud83d\udfe9 Cont. |\ud83d\udfe6 Cont. |\ud83d\udfe6 Cont. |\ud83d\udfe6 [Presenting](https://git.generalassemb.ly/ENT-Advanced-JAVA/mini-project/blob/main/README.md#presentation-and-reflection) |\n| 4:00  |\ud83d\udfe9 [Array Manipulation Lab](https://git.generalassemb.ly/ENT-Advanced-JAVA/day01-lab.md)|\ud83d\udfe9  Cont.|\ud83d\udfe6 Cont.|\ud83d\udfe6 Cont.|\ud83d\udfe6 Reflection        |\n| 4:30  |\ud83d\udfe9 Cont.|\ud83d\udfe9  Cont.|\ud83d\udfe6 Cont. |\ud83d\udfe6 Cont. |\ud83d\udfe6 Bring it Home|\n\n\nEach session is marked with a colored square indicating the type of activity:\n\n- \ud83d\udfe6 Lesson - Instruction: Instructor-Led Lecture, Guided Walk Through, and Modelling\n- \ud83d\udfe9 Practice - Application: Solo Work, Pair Activity, Group Activity\n\n**For Copying & Pasting Code, Resources, and More Check out\nthis [Resource Google Sheet](https://docs.google.com/spreadsheets/d/11ha4E_HhYW1kfEQV5raAYAgOpVJEzKaOQShEE_mdIMw/edit?usp=drive_link)**\n"
  }
]